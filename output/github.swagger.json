{
  "basePath": "/",
  "host": "api.github.com",
  "info": {
    "title": "GitHub API",
    "description": "The GitHub API"
  },
  "paths": {
    "/admin/ldap/teams/{team_id}/mapping": {
      "patch": {
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/admin/ldap/teams/{team_id}/sync": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "team_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/ldap/users/{username}/sync": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/users/{username}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "key",
                  "url",
                  "title",
                  "verified",
                  "created_at",
                  "read_only",
                  "user_id"
                ],
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "key": {
                    "type": "string",
                    "minLength": 1
                  },
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "title": {
                    "type": "string",
                    "minLength": 1
                  },
                  "verified": {
                    "type": "boolean"
                  },
                  "created_at": {
                    "type": "string",
                    "minLength": 1
                  },
                  "read_only": {
                    "type": "boolean"
                  },
                  "user_id": {
                    "type": "number"
                  },
                  "repository_id": {}
                }
              }
            }
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "email",
            "description": "Required. The user's email address.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "login",
            "description": "Required. The user's username.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "scopes",
            "description": "A list of scopes.",
            "in": "query",
            "type": "array"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/admin/users/{username}/authorizations": {
      "delete": {
        "parameters": [
          {
            "name": "scopes",
            "description": "A list of scopes.",
            "in": "query",
            "type": "array"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "login",
            "description": "Required. The user's new username.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "scopes",
            "description": "A list of scopes.",
            "in": "query",
            "type": "array"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/applications/{client_id}/tokens": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "url": {
                  "type": "string",
                  "minLength": 1
                },
                "scopes": {
                  "type": "array",
                  "items": {
                    "required": [],
                    "properties": {}
                  }
                },
                "token": {
                  "type": "string",
                  "minLength": 1
                },
                "token_last_eight": {
                  "type": "string",
                  "minLength": 1
                },
                "hashed_token": {
                  "type": "string",
                  "minLength": 1
                },
                "app": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1
                    },
                    "client_id": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "url",
                    "name",
                    "client_id"
                  ]
                },
                "note": {
                  "type": "string",
                  "minLength": 1
                },
                "note_url": {
                  "type": "string",
                  "minLength": 1
                },
                "updated_at": {
                  "type": "string",
                  "minLength": 1
                },
                "created_at": {
                  "type": "string",
                  "minLength": 1
                },
                "fingerprint": {
                  "type": "string",
                  "minLength": 1
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string",
                      "minLength": 1
                    },
                    "id": {
                      "type": "number"
                    },
                    "avatar_url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "gravatar_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "html_url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "followers_url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "following_url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "gists_url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "starred_url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "subscriptions_url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "organizations_url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "repos_url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "events_url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "received_events_url": {
                      "type": "string",
                      "minLength": 1
                    },
                    "type": {
                      "type": "string",
                      "minLength": 1
                    },
                    "site_admin": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "login",
                    "id",
                    "avatar_url",
                    "gravatar_id",
                    "url",
                    "html_url",
                    "followers_url",
                    "following_url",
                    "gists_url",
                    "starred_url",
                    "subscriptions_url",
                    "organizations_url",
                    "repos_url",
                    "events_url",
                    "received_events_url",
                    "type",
                    "site_admin"
                  ]
                }
              },
              "required": [
                "id",
                "url",
                "scopes",
                "token",
                "token_last_eight",
                "hashed_token",
                "app",
                "note",
                "note_url",
                "updated_at",
                "created_at",
                "fingerprint",
                "user"
              ]
            }
          }
        }
      }
    },
    "/applications/{client_id}/tokens/{access_token}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "access_token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "access_token",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "access_token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/authorizations": {
      "post": {
        "parameters": [
          {
            "name": "add_scopes",
            "description": "A list of scopes to add to this authorization.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "client_id",
            "description": "The 20 character OAuth app client key for which to create the token.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "client_secret",
            "description": "The 40 character OAuth app client secret for which to create the token.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "fingerprint",
            "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "note",
            "description": "Required. A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "note_url",
            "description": "A URL to remind you what app the OAuth token is for.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "remove_scopes",
            "description": "A list of scopes to remove from this authorization.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "scopes",
            "description": "A list of scopes that this authorization is in.",
            "in": "query",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/authorizations/clients/{client_id}": {
      "put": {
        "parameters": [
          {
            "name": "add_scopes",
            "description": "A list of scopes to add to this authorization.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "client_id",
            "description": "The 20 character OAuth app client key for which to create the token.",
            "in": "path",
            "type": "string"
          },
          {
            "name": "client_secret",
            "description": "The 40 character OAuth app client secret for which to create the token.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "fingerprint",
            "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "note",
            "description": "Required. A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "note_url",
            "description": "A URL to remind you what app the OAuth token is for.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "remove_scopes",
            "description": "A list of scopes to remove from this authorization.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "scopes",
            "description": "A list of scopes that this authorization is in.",
            "in": "query",
            "type": "array"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/authorizations/clients/{client_id}/{fingerprint}": {
      "put": {
        "parameters": [
          {
            "name": "add_scopes",
            "description": "A list of scopes to add to this authorization.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "client_secret",
            "description": "Required. The 40 character OAuth app client secret associated with the client ID specified in the URL.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "fingerprint",
            "description": "A unique string to distinguish an authorization from others created for the same client and user. If provided, this API is functionally equivalent to Get-or-create an authorization for a specific app and fingerprint.",
            "in": "path",
            "type": "string"
          },
          {
            "name": "note",
            "description": "A note to remind you what the OAuth token is for.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "note_url",
            "description": "A URL to remind you what app the OAuth token is for.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "remove_scopes",
            "description": "A list of scopes to remove from this authorization.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "scopes",
            "description": "A list of scopes that this authorization is in.",
            "in": "query",
            "type": "array"
          },
          {
            "in": "path",
            "name": "client_id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/authorizations/{id}": {
      "delete": {
        "parameters": [
          {
            "name": "add_scopes",
            "description": "A list of scopes to add to this authorization.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "fingerprint",
            "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "note",
            "description": "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "note_url",
            "description": "A URL to remind you what app the OAuth token is for.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "remove_scopes",
            "description": "A list of scopes to remove from this authorization.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "scopes",
            "description": "Replaces the authorization scopes with these.",
            "in": "query",
            "type": "array"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "add_scopes",
            "description": "A list of scopes to add to this authorization.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "client_id",
            "description": "The 20 character OAuth app client key for which to create the token.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "client_secret",
            "description": "The 40 character OAuth app client secret for which to create the token.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "fingerprint",
            "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "note",
            "description": "Required. A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "note_url",
            "description": "A URL to remind you what app the OAuth token is for.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "remove_scopes",
            "description": "A list of scopes to remove from this authorization.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "scopes",
            "description": "A list of scopes that this authorization is in.",
            "in": "query",
            "type": "array"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "add_scopes",
            "description": "A list of scopes to add to this authorization.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "client_secret",
            "description": "Required. The 40 character OAuth app client secret associated with the client ID specified in the URL.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "fingerprint",
            "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "note",
            "description": "A note to remind you what the OAuth token is for.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "note_url",
            "description": "A URL to remind you what app the OAuth token is for.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "remove_scopes",
            "description": "A list of scopes to remove from this authorization.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "scopes",
            "description": "A list of scopes that this authorization is in.",
            "in": "query",
            "type": "array"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/gists": {
      "get": {
        "parameters": [
          {
            "name": "content",
            "description": "Updated file contents.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "A description of the gist.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "filename",
            "description": "New name for this file.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "files",
            "description": "Required. Files that make up this gist.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "public",
            "description": "Indicates whether the gist is public. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "since",
            "description": "A timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Only gists updated at or after this time are returned.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "content",
            "description": "Updated file contents.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "A description of the gist.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "filename",
            "description": "New name for this file.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "files",
            "description": "Required. Files that make up this gist.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "public",
            "description": "Indicates whether the gist is public. Default: false",
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/gists/public": {
      "get": {
        "parameters": [
          {
            "name": "content",
            "description": "Updated file contents.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "A description of the gist.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "filename",
            "description": "New name for this file.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "files",
            "description": "Required. Files that make up this gist.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "public",
            "description": "Indicates whether the gist is public. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "since",
            "description": "A timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Only gists updated at or after this time are returned.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/gists/starred": {
      "get": {
        "parameters": [
          {
            "name": "content",
            "description": "Updated file contents.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "A description of the gist.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "filename",
            "description": "New name for this file.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "files",
            "description": "Required. Files that make up this gist.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "public",
            "description": "Indicates whether the gist is public. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "since",
            "description": "A timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Only gists updated at or after this time are returned.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/gists/{gist_id}/comments": {
      "post": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The comment text.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "gist_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/gists/{gist_id}/comments/{id}": {
      "delete": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The comment text.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "gist_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The comment text.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "gist_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The comment text.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "gist_id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/gists/{id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "user",
                  "url",
                  "id",
                  "created_at",
                  "updated_at"
                ],
                "properties": {
                  "user": {
                    "type": "object",
                    "properties": {
                      "login": {
                        "type": "string",
                        "minLength": 1
                      },
                      "id": {
                        "type": "number"
                      },
                      "avatar_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "gravatar_id": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "html_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "followers_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "following_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "gists_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "starred_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "subscriptions_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "organizations_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "repos_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "events_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "received_events_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "type": {
                        "type": "string",
                        "minLength": 1
                      },
                      "site_admin": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "login",
                      "id",
                      "avatar_url",
                      "gravatar_id",
                      "url",
                      "html_url",
                      "followers_url",
                      "following_url",
                      "gists_url",
                      "starred_url",
                      "subscriptions_url",
                      "organizations_url",
                      "repos_url",
                      "events_url",
                      "received_events_url",
                      "type",
                      "site_admin"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "id": {
                    "type": "string",
                    "minLength": 1
                  },
                  "created_at": {
                    "type": "string",
                    "minLength": 1
                  },
                  "updated_at": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "content",
            "description": "Updated file contents.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "A description of the gist.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "filename",
            "description": "New name for this file.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "files",
            "description": "Required. Files that make up this gist.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "public",
            "description": "Indicates whether the gist is public. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "since",
            "description": "A timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Only gists updated at or after this time are returned.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "content",
            "description": "Updated file contents.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "A description of the gist.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "filename",
            "description": "New name for this file.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "files",
            "description": "Required. Files that make up this gist.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "public",
            "description": "Indicates whether the gist is public. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/gists/{id}/commits": {
      "get": {
        "parameters": [
          {
            "name": "content",
            "description": "Updated file contents.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "A description of the gist.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "filename",
            "description": "New name for this file.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "files",
            "description": "Files that make up this gist.",
            "in": "query",
            "type": "object"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/gists/{id}/forks": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/gists/{id}/star": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/gists/{id}/{sha}": {
      "get": {
        "parameters": [
          {
            "name": "content",
            "description": "Updated file contents.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "A description of the gist.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "filename",
            "description": "New name for this file.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "files",
            "description": "Required. Files that make up this gist.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "public",
            "description": "Indicates whether the gist is public. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "sha",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/gitignore/templates/C": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/legacy/repos/search/{keyword}": {
      "get": {
        "parameters": [
          {
            "name": "email",
            "description": "The email address",
            "in": "query",
            "type": "string"
          },
          {
            "name": "keyword",
            "description": "The search term.",
            "in": "path",
            "type": "string"
          },
          {
            "name": "language",
            "description": "Filter results by language",
            "in": "query",
            "type": "string"
          },
          {
            "name": "order",
            "description": "The sort field. if sort param is provided. Can be either asc or desc.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "The sort field. One of stars, forks, or updated. Default: results are sorted by best match.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "start_page",
            "description": "The page number to fetch",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return. Can be either open or closed.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/legacy/user/email/{email}": {
      "get": {
        "parameters": [
          {
            "name": "email",
            "description": "The email address",
            "in": "path",
            "type": "string"
          },
          {
            "name": "keyword",
            "description": "The search term",
            "in": "query",
            "type": "string"
          },
          {
            "name": "order",
            "description": "The sort field. if sort param is provided. Can be either asc or desc.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "The sort field. One of stars, forks, or updated. Default: results are sorted by best match.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "start_page",
            "description": "The page number to fetch",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/legacy/user/search/{keyword}": {
      "get": {
        "parameters": [
          {
            "name": "email",
            "description": "The email address",
            "in": "query",
            "type": "string"
          },
          {
            "name": "keyword",
            "description": "The search term",
            "in": "path",
            "type": "string"
          },
          {
            "name": "language",
            "description": "Filter results by language",
            "in": "query",
            "type": "string"
          },
          {
            "name": "order",
            "description": "The sort field. if sort param is provided. Can be either asc or desc.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "The sort field. One of stars, forks, or updated. Default: results are sorted by best match.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "start_page",
            "description": "The page number to fetch",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/licenses/mit": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/markdown/raw": {
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/networks/{owner}/{repo}/events": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {}
      }
    },
    "/notifications": {
      "put": {
        "parameters": [
          {
            "name": "all",
            "description": "If true, show notifications marked as read. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "before",
            "description": "Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "last_read_at",
            "description": "Describes the last point that notifications were checked.  Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: Time.now",
            "in": "query",
            "type": "string"
          },
          {
            "name": "participating",
            "description": "If true, only shows notifications in which the user is directly participating or mentioned. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "since",
            "description": "Only show notifications updated after the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: Time.now",
            "in": "query",
            "type": "string"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this thread",
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/notifications/threads/{id}": {
      "get": {
        "parameters": [
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "last_read_at",
            "description": "Describes the last point that notifications were checked.  Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: Time.now",
            "in": "query",
            "type": "string"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "205": {
            "description": "Reset Content"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/notifications/threads/{id}/subscription": {
      "delete": {
        "parameters": [
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "type": "object",
              "properties": {
                "subscribed": {
                  "type": "boolean"
                },
                "ignored": {
                  "type": "boolean"
                },
                "reason": {},
                "created_at": {
                  "type": "string",
                  "minLength": 1
                },
                "url": {
                  "type": "string",
                  "minLength": 1
                },
                "thread_url": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": [
                "subscribed",
                "ignored",
                "created_at",
                "url",
                "thread_url"
              ]
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "205": {
            "description": "Reset Content"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "parameters": [
          {
            "name": "billing_email",
            "description": "Billing email address. This address is not publicized.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "company",
            "description": "The company name.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "The description of the company.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "The publicly visible email address.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "location",
            "description": "The location.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The shorthand name of the company.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "since",
            "description": "The integer ID of the last Organization that you've seen.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orgs/octokit/repos": {
      "get": {
        "parameters": [
          {
            "name": "301",
            "in": "query",
            "type": "Permanent redirection. The URI you used to make the request has been superseded by the one specified in the Location header field. This and all future requests to this resource should be directed to the new URI."
          },
          {
            "name": "302,",
            "in": "query",
            "type": "Temporary redirection. The request should be repeated verbatim to the URI specified in the Location header field but clients should continue to use the original URI for future requests."
          },
          {
            "name": "DELETE",
            "in": "query",
            "type": "Used for deleting resources."
          },
          {
            "name": "GET",
            "in": "query",
            "type": "Used for retrieving resources."
          },
          {
            "name": "HEAD",
            "in": "query",
            "type": "Can be issued against any resource to get just the HTTP header info."
          },
          {
            "name": "PATCH",
            "in": "query",
            "type": "Used for updating resources with partial JSON data.  For instance, an Issue resource has title and body attributes.  A PATCH request may accept one or more of the attributes to update the resource.  PATCH is a relatively new and uncommon HTTP verb, so resource endpoints also accept POST requests."
          },
          {
            "name": "POST",
            "in": "query",
            "type": "Used for creating resources."
          },
          {
            "name": "PUT",
            "in": "query",
            "type": "Used for replacing resources or collections. For PUT requests with no body attribute, be sure to set the Content-Length header to zero."
          },
          {
            "name": "X-RateLimit-Limit",
            "in": "query",
            "type": "The maximum number of requests that the consumer is permitted to make per hour."
          },
          {
            "name": "X-RateLimit-Remaining",
            "in": "query",
            "type": "The number of requests remaining in the current rate limit window."
          },
          {
            "name": "X-RateLimit-Reset",
            "in": "query",
            "type": "The time at which the current rate limit window resets in UTC epoch seconds."
          },
          {
            "name": "already_exists",
            "in": "query",
            "type": "This means another resource has the same value as this field.  This can happen in resources that must have some unique key (such as Label names)."
          },
          {
            "name": "first",
            "in": "query",
            "type": "The link relation for the first page of results."
          },
          {
            "name": "invalid",
            "in": "query",
            "type": "This means the formatting of a field is invalid.  The documentation for that resource should be able to give you more specific information."
          },
          {
            "name": "last",
            "in": "query",
            "type": "The link relation for the last page of results."
          },
          {
            "name": "missing",
            "in": "query",
            "type": "This means a resource does not exist."
          },
          {
            "name": "missing_field",
            "in": "query",
            "type": "This means a required field on a resource has not been set."
          },
          {
            "name": "next",
            "in": "query",
            "type": "The link relation for the immediate next page of results."
          },
          {
            "name": "prev",
            "in": "query",
            "type": "The link relation for the immediate previous page of results."
          }
        ],
        "responses": {}
      }
    },
    "/orgs/{org}": {
      "get": {
        "parameters": [
          {
            "name": "billing_email",
            "description": "Billing email address. This address is not publicized.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "company",
            "description": "The company name.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "The description of the company.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "The publicly visible email address.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "location",
            "description": "The location.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The shorthand name of the company.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "billing_email",
            "description": "Billing email address. This address is not publicized.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "company",
            "description": "The company name.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "The description of the company.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "The publicly visible email address.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "location",
            "description": "The location.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The shorthand name of the company.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orgs/{org}/events": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {}
      }
    },
    "/orgs/{org}/hooks": {
      "post": {
        "parameters": [
          {
            "name": "X-GitHub-Delivery",
            "in": "query",
            "type": "A guid to identify the payload and event being sent."
          },
          {
            "name": "X-GitHub-Event",
            "in": "query",
            "type": "The event type that was triggered."
          },
          {
            "name": "X-Hub-Signature",
            "in": "query",
            "type": "The value of this header is computed as the HMAC hex digest of the body, using the secret config option as the key."
          },
          {
            "name": "active",
            "description": "Determines whether the hook is actually triggered on pushes.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "config",
            "description": "Required. Key/value pairs to provide settings for this webhook. These are defined below.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "content_type",
            "description": "The media type used to serialize the payloads. Supported values include json and form. The default is form.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "events",
            "description": "Determines what events the hook is triggered for.  Default: [\"push\"].",
            "in": "query",
            "type": "array"
          },
          {
            "name": "insecure_ssl",
            "description": "Determines whether the SSL certificate of the host for url will be verified when delivering payloads. Supported values include \"0\" (verification is performed) and \"1\" (verification is not performed). The default is \"0\". We strongly recommend not setting this to \"1\" as you are subject to man-in-the-middle and other attacks.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. Must be passed as \"web\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "secret",
            "description": "If provided, payloads will be delivered with an X-Hub-Signature header. The value of this header is computed as the HMAC hex digest of the body, using the secret as the key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "url",
            "description": "Required The URL to which the payloads will be delivered.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orgs/{org}/hooks/{id}": {
      "delete": {
        "parameters": [
          {
            "name": "X-GitHub-Delivery",
            "in": "query",
            "type": "A guid to identify the payload and event being sent."
          },
          {
            "name": "X-GitHub-Event",
            "in": "query",
            "type": "The event type that was triggered."
          },
          {
            "name": "X-Hub-Signature",
            "in": "query",
            "type": "The value of this header is computed as the HMAC hex digest of the body, using the secret config option as the key."
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "X-GitHub-Delivery",
            "in": "query",
            "type": "A guid to identify the payload and event being sent."
          },
          {
            "name": "X-GitHub-Event",
            "in": "query",
            "type": "The event type that was triggered."
          },
          {
            "name": "X-Hub-Signature",
            "in": "query",
            "type": "The value of this header is computed as the HMAC hex digest of the body, using the secret config option as the key."
          },
          {
            "name": "active",
            "description": "Determines whether the hook is actually triggered on pushes.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "config",
            "description": "Required. Key/value pairs to provide settings for this webhook. These are defined below.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "content_type",
            "description": "The media type used to serialize the payloads. Supported values include json and form. The default is form.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "events",
            "description": "Determines what events the hook is triggered for.  Default: [\"push\"].",
            "in": "query",
            "type": "array"
          },
          {
            "name": "insecure_ssl",
            "description": "Determines whether the SSL certificate of the host for url will be verified when delivering payloads. Supported values include \"0\" (verification is performed) and \"1\" (verification is not performed). The default is \"0\". We strongly recommend not setting this to \"1\" as you are subject to man-in-the-middle and other attacks.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. Must be passed as \"web\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "secret",
            "description": "If provided, payloads will be delivered with an X-Hub-Signature header. The value of this header is computed as the HMAC hex digest of the body, using the secret as the key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "url",
            "description": "Required The URL to which the payloads will be delivered.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-GitHub-Delivery",
            "in": "query",
            "type": "A guid to identify the payload and event being sent."
          },
          {
            "name": "X-GitHub-Event",
            "in": "query",
            "type": "The event type that was triggered."
          },
          {
            "name": "X-Hub-Signature",
            "in": "query",
            "type": "The value of this header is computed as the HMAC hex digest of the body, using the secret config option as the key."
          },
          {
            "name": "active",
            "description": "Determines whether the hook is actually triggered on pushes.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "config",
            "description": "Required. Key/value pairs to provide settings for this webhook. These are defined below.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "content_type",
            "description": "The media type used to serialize the payloads. Supported values include json and form. The default is form.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "events",
            "description": "Determines what events the hook is triggered for.  Default: [\"push\"].",
            "in": "query",
            "type": "array"
          },
          {
            "name": "insecure_ssl",
            "description": "Determines whether the SSL certificate of the host for url will be verified when delivering payloads. Supported values include \"0\" (verification is performed) and \"1\" (verification is not performed). The default is \"0\". We strongly recommend not setting this to \"1\" as you are subject to man-in-the-middle and other attacks.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. Must be passed as \"web\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "secret",
            "description": "If provided, payloads will be delivered with an X-Hub-Signature header. The value of this header is computed as the HMAC hex digest of the body, using the secret as the key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "url",
            "description": "Required The URL to which the payloads will be delivered.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/orgs/{org}/hooks/{id}/pings": {
      "post": {
        "parameters": [
          {
            "name": "X-GitHub-Delivery",
            "in": "query",
            "type": "A guid to identify the payload and event being sent."
          },
          {
            "name": "X-GitHub-Event",
            "in": "query",
            "type": "The event type that was triggered."
          },
          {
            "name": "X-Hub-Signature",
            "in": "query",
            "type": "The value of this header is computed as the HMAC hex digest of the body, using the secret config option as the key."
          },
          {
            "name": "active",
            "description": "Determines whether the hook is actually triggered on pushes.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "config",
            "description": "Required. Key/value pairs to provide settings for this webhook. These are defined below.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "content_type",
            "description": "The media type used to serialize the payloads. Supported values include json and form. The default is form.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "events",
            "description": "Determines what events the hook is triggered for.  Default: [\"push\"].",
            "in": "query",
            "type": "array"
          },
          {
            "name": "insecure_ssl",
            "description": "Determines whether the SSL certificate of the host for url will be verified when delivering payloads. Supported values include \"0\" (verification is performed) and \"1\" (verification is not performed). The default is \"0\". We strongly recommend not setting this to \"1\" as you are subject to man-in-the-middle and other attacks.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "secret",
            "description": "If provided, payloads will be delivered with an X-Hub-Signature header. The value of this header is computed as the HMAC hex digest of the body, using the secret as the key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "url",
            "description": "Required The URL to which the payloads will be delivered.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orgs/{org}/issues": {
      "get": {
        "parameters": [
          {
            "name": "assignee",
            "description": "Can be the name of a user. Pass in none for issues with no assigned user, and * for issues assigned to any user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "The contents of the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "creator",
            "description": "The user that created the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Can be either asc or desc. Default: desc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Indicates which sorts of issues to return. Can be one of:* assigned: Issues assigned to you* created: Issues created by you* mentioned: Issues mentioning you* subscribed: Issues you're subscribed to updates for* all: All issues the authenticated user can see, regardless of participation or creation Default: assigned",
            "in": "query",
            "type": "string"
          },
          {
            "name": "labels",
            "description": "A list of comma separated label names.  Example: bug,ui,@high",
            "in": "query",
            "type": "string"
          },
          {
            "name": "mentioned",
            "description": "A user that's mentioned in the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "milestone",
            "description": "If an integer is passed, it should refer to a milestone by its number field. If the string * is passed, issues with any milestone are accepted. If the string none is passed, issues without milestones are returned.",
            "in": "query",
            "type": "\ninteger or string\n"
          },
          {
            "name": "since",
            "description": "Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "What to sort results by. Can be either created, updated, comments. Default: created",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return. Can be either open, closed, or all. Default: open",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "Required. The title of the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orgs/{org}/members/{username}": {
      "delete": {
        "parameters": [
          {
            "name": "role",
            "description": "Required. The role to give the user in the organization. Can be one of: * admin - The user will become an owner of the organization. * member - The user will become a non-owner member of the organization.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "filter",
            "description": "Filter members returned in the list. Can be one of:* 2fa_disabled: Members without two-factor authentication enabled. Available for organization owners.* all: All organization members.Default: all",
            "in": "query",
            "type": "string"
          },
          {
            "name": "role",
            "description": "Filter members returned by their role. Can be one of:* all: All members of the organization, regardless of role.* admin: Organization owners.* member: Non-owner organization members. This option requires a custom media type to be specified. Please see more in the alert below.Default: all",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orgs/{org}/memberships/{username}": {
      "delete": {
        "parameters": [
          {
            "name": "role",
            "description": "Required. The role to give the user in the organization. Can be one of: * admin - The user will become an owner of the organization. * member - The user will become a non-owner member of the organization.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "role",
            "description": "Required. The role to give the user in the organization. Can be one of: * admin - The user will become an owner of the organization. * member - The user will become a non-owner member of the organization.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "role",
            "description": "Required. The role to give the user in the organization. Can be one of: * admin - The user will become an owner of the organization. * member - The user will become a non-owner member of the organization.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orgs/{org}/migrations": {
      "get": {
        "parameters": [
          {
            "name": "exclude_attachments",
            "description": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size). Default: false.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "lock_repositories",
            "description": "Indicates whether repositories should be locked (to prevent manipulation) while migrating data. Default: false.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "repositories",
            "description": "Required. A list of arrays indicating which repositories should be migrated.",
            "in": "query",
            "type": "\narray of strings\n"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/orgs/{org}/migrations/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/orgs/{org}/migrations/{id}/archive": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "302": {
            "description": "Found"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "guid": {
                  "type": "string",
                  "minLength": 1
                },
                "state": {
                  "type": "string",
                  "minLength": 1
                },
                "lock_repositories": {
                  "type": "boolean"
                },
                "exclude_attachments": {
                  "type": "boolean"
                },
                "url": {
                  "type": "string",
                  "minLength": 1
                },
                "created_at": {
                  "type": "string",
                  "minLength": 1
                },
                "updated_at": {
                  "type": "string",
                  "minLength": 1
                },
                "repositories": {
                  "type": "array",
                  "uniqueItems": true,
                  "minItems": 1,
                  "items": {
                    "required": [
                      "id",
                      "name",
                      "full_name",
                      "description",
                      "private",
                      "fork",
                      "url",
                      "html_url",
                      "archive_url",
                      "assignees_url",
                      "blobs_url",
                      "branches_url",
                      "clone_url",
                      "collaborators_url",
                      "comments_url",
                      "commits_url",
                      "compare_url",
                      "contents_url",
                      "contributors_url",
                      "downloads_url",
                      "events_url",
                      "forks_url",
                      "git_commits_url",
                      "git_refs_url",
                      "git_tags_url",
                      "git_url",
                      "hooks_url",
                      "issue_comment_url",
                      "issue_events_url",
                      "issues_url",
                      "keys_url",
                      "labels_url",
                      "languages_url",
                      "merges_url",
                      "milestones_url",
                      "mirror_url",
                      "notifications_url",
                      "pulls_url",
                      "releases_url",
                      "ssh_url",
                      "stargazers_url",
                      "statuses_url",
                      "subscribers_url",
                      "subscription_url",
                      "svn_url",
                      "tags_url",
                      "teams_url",
                      "trees_url",
                      "homepage",
                      "forks_count",
                      "stargazers_count",
                      "watchers_count",
                      "size",
                      "default_branch",
                      "open_issues_count",
                      "has_issues",
                      "has_wiki",
                      "has_pages",
                      "has_downloads",
                      "pushed_at",
                      "created_at",
                      "updated_at"
                    ],
                    "properties": {
                      "id": {
                        "type": "number"
                      },
                      "owner": {
                        "type": "object",
                        "properties": {
                          "login": {
                            "type": "string",
                            "minLength": 1
                          },
                          "id": {
                            "type": "number"
                          },
                          "avatar_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "gravatar_id": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "html_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "followers_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "following_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "gists_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "starred_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "subscriptions_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "organizations_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "repos_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "events_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "received_events_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "type": {
                            "type": "string",
                            "minLength": 1
                          },
                          "site_admin": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "login",
                          "id",
                          "avatar_url",
                          "gravatar_id",
                          "url",
                          "html_url",
                          "followers_url",
                          "following_url",
                          "gists_url",
                          "starred_url",
                          "subscriptions_url",
                          "organizations_url",
                          "repos_url",
                          "events_url",
                          "received_events_url",
                          "type",
                          "site_admin"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "minLength": 1
                      },
                      "full_name": {
                        "type": "string",
                        "minLength": 1
                      },
                      "description": {
                        "type": "string",
                        "minLength": 1
                      },
                      "private": {
                        "type": "boolean"
                      },
                      "fork": {
                        "type": "boolean"
                      },
                      "url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "html_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "archive_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "assignees_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "blobs_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "branches_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "clone_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "collaborators_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "comments_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "commits_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "compare_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "contents_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "contributors_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "downloads_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "events_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "forks_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "git_commits_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "git_refs_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "git_tags_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "git_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "hooks_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "issue_comment_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "issue_events_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "issues_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "keys_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "labels_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "languages_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "merges_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "milestones_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "mirror_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "notifications_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "pulls_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "releases_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "ssh_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "stargazers_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "statuses_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "subscribers_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "subscription_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "svn_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "tags_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "teams_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "trees_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "homepage": {
                        "type": "string",
                        "minLength": 1
                      },
                      "language": {},
                      "forks_count": {
                        "type": "number"
                      },
                      "stargazers_count": {
                        "type": "number"
                      },
                      "watchers_count": {
                        "type": "number"
                      },
                      "size": {
                        "type": "number"
                      },
                      "default_branch": {
                        "type": "string",
                        "minLength": 1
                      },
                      "open_issues_count": {
                        "type": "number"
                      },
                      "has_issues": {
                        "type": "boolean"
                      },
                      "has_wiki": {
                        "type": "boolean"
                      },
                      "has_pages": {
                        "type": "boolean"
                      },
                      "has_downloads": {
                        "type": "boolean"
                      },
                      "pushed_at": {
                        "type": "string",
                        "minLength": 1
                      },
                      "created_at": {
                        "type": "string",
                        "minLength": 1
                      },
                      "updated_at": {
                        "type": "string",
                        "minLength": 1
                      },
                      "permissions": {
                        "type": "object",
                        "properties": {
                          "admin": {
                            "type": "boolean"
                          },
                          "push": {
                            "type": "boolean"
                          },
                          "pull": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "admin",
                          "push",
                          "pull"
                        ]
                      }
                    }
                  }
                }
              },
              "required": [
                "id",
                "guid",
                "state",
                "lock_repositories",
                "exclude_attachments",
                "url",
                "created_at",
                "updated_at",
                "repositories"
              ]
            }
          }
        }
      }
    },
    "/orgs/{org}/migrations/{id}/repos/{repo_name}/lock": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo_name",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/orgs/{org}/public_members": {
      "get": {
        "parameters": [
          {
            "name": "role",
            "description": "Required. The role to give the user in the organization. Can be one of: * admin - The user will become an owner of the organization. * member - The user will become a non-owner member of the organization.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/orgs/{org}/public_members/{username}": {
      "delete": {
        "parameters": [
          {
            "name": "role",
            "description": "Required. The role to give the user in the organization. Can be one of: * admin - The user will become an owner of the organization. * member - The user will become a non-owner member of the organization.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "role",
            "description": "Required. The role to give the user in the organization. Can be one of: * admin - The user will become an owner of the organization. * member - The user will become a non-owner member of the organization.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "role",
            "description": "Required. The role to give the user in the organization. Can be one of: * admin - The user will become an owner of the organization. * member - The user will become a non-owner member of the organization.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/orgs/{org}/repos": {
      "get": {
        "parameters": [
          {
            "name": "anon",
            "description": "Set to 1 or true to include anonymous contributors in results.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "auto_init",
            "description": "Pass true to create an initial commit with empty README. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "default_branch",
            "description": "Updates the default branch for this repository.",
            "in": "query",
            "type": "String"
          },
          {
            "name": "description",
            "description": "A short description of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "direction",
            "description": "Can be one of asc or desc. Default: when using full_name: asc, otherwise desc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "gitignore_template",
            "description": "Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, \"Haskell\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "has_downloads",
            "description": "Either true to enable downloads for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_issues",
            "description": "Either true to enable issues for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_wiki",
            "description": "Either true to enable the wiki for this repository, false to disable it. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "homepage",
            "description": "A URL with more information about the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "license_template",
            "description": "Desired LICENSE template to apply. Use the name of the template without the extension. For example, \"mit\" or \"mozilla\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "private",
            "description": "Either true to create a private repository, or false to create a public one. Creating private repositories requires a paid GitHub account.  Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "name": "since",
            "description": "The integer ID of the last Repository that you've seen.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Can be one of created, updated, pushed, full_name. Default: full_name",
            "in": "query",
            "type": "string"
          },
          {
            "name": "team_id",
            "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "type",
            "description": "Can be one of all, owner, member. Default: owner",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "anon",
            "description": "Set to 1 or true to include anonymous contributors in results.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "auto_init",
            "description": "Pass true to create an initial commit with empty README. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "default_branch",
            "description": "Updates the default branch for this repository.",
            "in": "query",
            "type": "String"
          },
          {
            "name": "description",
            "description": "A short description of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "gitignore_template",
            "description": "Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, \"Haskell\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "has_downloads",
            "description": "Either true to enable downloads for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_issues",
            "description": "Either true to enable issues for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_wiki",
            "description": "Either true to enable the wiki for this repository, false to disable it. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "homepage",
            "description": "A URL with more information about the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "license_template",
            "description": "Desired LICENSE template to apply. Use the name of the template without the extension. For example, \"mit\" or \"mozilla\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "private",
            "description": "Either true to create a private repository, or false to create a public one. Creating private repositories requires a paid GitHub account.  Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "name": "team_id",
            "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
            "in": "query",
            "type": "integer"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/orgs/{org}/teams": {
      "post": {
        "parameters": [
          {
            "name": "description",
            "description": "The description of the team.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the team.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "permission",
            "description": "Deprecated. In the preview period described in the alert below, a team's permission attribute no longer dictates what permission it has on its repositories; it only dictates what permission the repositories in this request will be added with, and what permission a new repository will be added to the team with if none is specified by the user. Avoid confusion by specifying a permission when using the Add team repository API instead.The permission to grant the team. Can be one of: * pull - team members can pull, but not push to or administer these repositories. * push - team members can pull and push, but not administer these repositories. * admin - team members can pull, push and administer these repositories.Default: pull",
            "in": "query",
            "type": "string"
          },
          {
            "name": "privacy",
            "description": "The level of privacy this team should have. Can be one of: * secret - only visible to organization owners and members of this team. * closed - visible to all members of this organization.Default: secretThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "repo_names",
            "description": "The repositories to add the team to.",
            "in": "query",
            "type": "\narray of strings\n"
          },
          {
            "name": "role",
            "description": "Filters members returned by their role in the team. Can be one of: * member - normal members of the team. * maintainer - team maintainers. * all - all members of the team.Default: allThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/octocat/Hello-World/git/refs/heads/feature-a": {
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/repos/octocat/Hello-World/git/refs/tags/v1.0": {
      "delete": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/repos/octokit/octokit.rb": {
      "get": {
        "parameters": [
          {
            "name": "301",
            "in": "query",
            "type": "Permanent redirection. The URI you used to make the request has been superseded by the one specified in the Location header field. This and all future requests to this resource should be directed to the new URI."
          },
          {
            "name": "302,",
            "in": "query",
            "type": "Temporary redirection. The request should be repeated verbatim to the URI specified in the Location header field but clients should continue to use the original URI for future requests."
          },
          {
            "name": "DELETE",
            "in": "query",
            "type": "Used for deleting resources."
          },
          {
            "name": "GET",
            "in": "query",
            "type": "Used for retrieving resources."
          },
          {
            "name": "HEAD",
            "in": "query",
            "type": "Can be issued against any resource to get just the HTTP header info."
          },
          {
            "name": "PATCH",
            "in": "query",
            "type": "Used for updating resources with partial JSON data.  For instance, an Issue resource has title and body attributes.  A PATCH request may accept one or more of the attributes to update the resource.  PATCH is a relatively new and uncommon HTTP verb, so resource endpoints also accept POST requests."
          },
          {
            "name": "POST",
            "in": "query",
            "type": "Used for creating resources."
          },
          {
            "name": "PUT",
            "in": "query",
            "type": "Used for replacing resources or collections. For PUT requests with no body attribute, be sure to set the Content-Length header to zero."
          },
          {
            "name": "X-RateLimit-Limit",
            "in": "query",
            "type": "The maximum number of requests that the consumer is permitted to make per hour."
          },
          {
            "name": "X-RateLimit-Remaining",
            "in": "query",
            "type": "The number of requests remaining in the current rate limit window."
          },
          {
            "name": "X-RateLimit-Reset",
            "in": "query",
            "type": "The time at which the current rate limit window resets in UTC epoch seconds."
          },
          {
            "name": "already_exists",
            "in": "query",
            "type": "This means another resource has the same value as this field.  This can happen in resources that must have some unique key (such as Label names)."
          },
          {
            "name": "first",
            "in": "query",
            "type": "The link relation for the first page of results."
          },
          {
            "name": "invalid",
            "in": "query",
            "type": "This means the formatting of a field is invalid.  The documentation for that resource should be able to give you more specific information."
          },
          {
            "name": "last",
            "in": "query",
            "type": "The link relation for the last page of results."
          },
          {
            "name": "missing",
            "in": "query",
            "type": "This means a resource does not exist."
          },
          {
            "name": "missing_field",
            "in": "query",
            "type": "This means a required field on a resource has not been set."
          },
          {
            "name": "next",
            "in": "query",
            "type": "The link relation for the immediate next page of results."
          },
          {
            "name": "prev",
            "in": "query",
            "type": "The link relation for the immediate previous page of results."
          }
        ],
        "responses": {}
      }
    },
    "/repos/{owner}/{repo}": {
      "delete": {
        "parameters": [
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "type": "object",
              "properties": {
                "protection": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    },
                    "required_status_checks": {
                      "type": "object",
                      "properties": {
                        "enforcement_level": {
                          "type": "string",
                          "minLength": 1
                        },
                        "contexts": {
                          "type": "array",
                          "items": {
                            "required": [],
                            "properties": {}
                          }
                        }
                      },
                      "required": [
                        "enforcement_level",
                        "contexts"
                      ]
                    }
                  },
                  "required": [
                    "enabled",
                    "required_status_checks"
                  ]
                }
              },
              "required": [
                "protection"
              ]
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "anon",
            "description": "Set to 1 or true to include anonymous contributors in results.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "auto_init",
            "description": "Pass true to create an initial commit with empty README. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "default_branch",
            "description": "Updates the default branch for this repository.",
            "in": "query",
            "type": "String"
          },
          {
            "name": "description",
            "description": "A short description of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "gitignore_template",
            "description": "Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, \"Haskell\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "has_downloads",
            "description": "Either true to enable downloads for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_issues",
            "description": "Either true to enable issues for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_wiki",
            "description": "Either true to enable the wiki for this repository, false to disable it. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "homepage",
            "description": "A URL with more information about the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "license_template",
            "description": "Desired LICENSE template to apply. Use the name of the template without the extension. For example, \"mit\" or \"mozilla\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "private",
            "description": "Either true to create a private repository, or false to create a public one. Creating private repositories requires a paid GitHub account.  Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "name": "team_id",
            "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
            "in": "query",
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "anon",
            "description": "Set to 1 or true to include anonymous contributors in results.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "default_branch",
            "description": "Updates the default branch for this repository.",
            "in": "query",
            "type": "String"
          },
          {
            "name": "description",
            "description": "A short description of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "has_downloads",
            "description": "Either true to enable downloads for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_issues",
            "description": "Either true to enable issues for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_wiki",
            "description": "Either true to enable the wiki for this repository, false to disable it. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "homepage",
            "description": "A URL with more information about the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "private",
            "description": "Either true to make the repository private, or false to make it public. Creating private repositories requires a paid GitHub account.  Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/assignees/{assignee}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "assignee",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "login",
                  "id",
                  "avatar_url",
                  "gravatar_id",
                  "url",
                  "html_url",
                  "followers_url",
                  "following_url",
                  "gists_url",
                  "starred_url",
                  "subscriptions_url",
                  "organizations_url",
                  "repos_url",
                  "events_url",
                  "received_events_url",
                  "type",
                  "site_admin"
                ],
                "properties": {
                  "login": {
                    "type": "string",
                    "minLength": 1
                  },
                  "id": {
                    "type": "number"
                  },
                  "avatar_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "html_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "followers_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "following_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "gists_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "starred_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "subscriptions_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "organizations_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "repos_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "events_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "received_events_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "type": {
                    "type": "string",
                    "minLength": 1
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/branches": {
      "get": {
        "parameters": [
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}": {
      "get": {
        "parameters": [
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "branch",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "branch",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/collaborators/{username}": {
      "delete": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team. Only valid on organization-owned repositories. Can be one of: * pull - can pull, but not push to or administer this repository. * push - can pull and push, but not administer this repository. * admin -  can pull, push and administer this repository.Default: pushThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team. Only valid on organization-owned repositories. Can be one of: * pull - can pull, but not push to or administer this repository. * push - can pull and push, but not administer this repository. * admin -  can pull, push and administer this repository.Default: pushThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team. Only valid on organization-owned repositories. Can be one of: * pull - can pull, but not push to or administer this repository. * push - can pull and push, but not administer this repository. * admin -  can pull, push and administer this repository.Default: pushThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/comments/{id}": {
      "delete": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The contents of the comment",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The contents of the comment.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "line",
            "description": "Deprecated. Use position parameter instead. Line number in the file to comment on.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "path",
            "description": "Relative path of the file to comment on.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "position",
            "description": "Line index in the diff to comment on.",
            "in": "query",
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The contents of the comment",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/comments": {
      "get": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The contents of the comment.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "line",
            "description": "Deprecated. Use position parameter instead. Line number in the file to comment on.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "path",
            "description": "Relative path of the file to comment on.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "position",
            "description": "Line index in the diff to comment on.",
            "in": "query",
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "ref",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/status": {
      "get": {
        "parameters": [
          {
            "name": "ref",
            "description": "Required. Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.",
            "in": "path",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/statuses": {
      "get": {
        "parameters": [
          {
            "name": "context",
            "description": "A string label to differentiate this status from the status of other systems. Default: \"default\"",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "A short description of the status.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "ref",
            "description": "Required. Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.",
            "in": "path",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Required. The state of the status. Can be one of pending, success, error, or failure.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "target_url",
            "description": "The target URL to associate with this status.  This URL will be linked from the GitHub UI to allow users to easily see the 'source' of the Status.For example, if your Continuous Integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:http://ci.example.com/user/repo/build/sha.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{sha}": {
      "get": {
        "parameters": [
          {
            "name": "author",
            "description": "GitHub login or email address by which to filter by commit author.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "path",
            "description": "Only commits containing this file path will be returned.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sha",
            "description": "SHA or branch to start listing commits from. Default: the repository’s default branch (usually master).",
            "in": "path",
            "type": "string"
          },
          {
            "name": "since",
            "description": "Only commits after this date will be returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "until",
            "description": "Only commits before this date will be returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/commits/{sha}/comments": {
      "post": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The contents of the comment.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "line",
            "description": "Deprecated. Use position parameter instead. Line number in the file to comment on.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "path",
            "description": "Relative path of the file to comment on.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "position",
            "description": "Line index in the diff to comment on.",
            "in": "query",
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "sha",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/compare/hubot:branchname...octocat:branchname": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {}
      }
    },
    "/repos/{owner}/{repo}/compare/{base...:head}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "base...:head",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/contents/{path}": {
      "delete": {
        "parameters": [
          {
            "name": "archive_format",
            "description": "Can be either tarball or zipball. Default: tarball",
            "in": "query",
            "type": "string"
          },
          {
            "name": "branch",
            "description": "The branch name. Default: the repository’s default branch (usually master)",
            "in": "query",
            "type": "string"
          },
          {
            "name": "content",
            "description": "Required. The updated file content, Base64 encoded.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "The email of the author (or committer) of the commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "message",
            "description": "Required. The commit message.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the author (or committer) of the commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "path",
            "description": "Required. The content path.",
            "in": "path",
            "type": "string"
          },
          {
            "name": "ref",
            "description": "A valid Git reference. Default: the repository’s default branch (usually master)",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sha",
            "description": "Required. The blob SHA of the file being replaced.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "archive_format",
            "description": "Can be either tarball or zipball. Default: tarball",
            "in": "query",
            "type": "string"
          },
          {
            "name": "branch",
            "description": "The branch name. Default: the repository’s default branch (usually master)",
            "in": "query",
            "type": "string"
          },
          {
            "name": "content",
            "description": "Required. The new file content, Base64 encoded.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "The email of the author (or committer) of the commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "message",
            "description": "Required. The commit message.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the author (or committer) of the commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "path",
            "description": "The content path.",
            "in": "path",
            "type": "string"
          },
          {
            "name": "ref",
            "description": "The name of the commit/branch/tag. Default: the repository’s default branch (usually master)",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sha",
            "description": "Required. The blob SHA of the file being replaced.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "archive_format",
            "description": "Can be either tarball or zipball. Default: tarball",
            "in": "query",
            "type": "string"
          },
          {
            "name": "branch",
            "description": "The branch name. Default: the repository’s default branch (usually master)",
            "in": "query",
            "type": "string"
          },
          {
            "name": "content",
            "description": "Required. The new file content, Base64 encoded.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "The email of the author (or committer) of the commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "message",
            "description": "Required. The commit message.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the author (or committer) of the commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "path",
            "description": "The content path.",
            "in": "path",
            "type": "string"
          },
          {
            "name": "ref",
            "description": "The name of the commit/branch/tag. Default: the repository’s default branch (usually master)",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sha",
            "description": "Required. The blob SHA of the file being replaced.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/contributors": {
      "get": {
        "parameters": [
          {
            "name": "anon",
            "description": "Set to 1 or true to include anonymous contributors in results.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "default_branch",
            "description": "Updates the default branch for this repository.",
            "in": "query",
            "type": "String"
          },
          {
            "name": "description",
            "description": "A short description of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "has_downloads",
            "description": "Either true to enable downloads for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_issues",
            "description": "Either true to enable issues for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_wiki",
            "description": "Either true to enable the wiki for this repository, false to disable it. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "homepage",
            "description": "A URL with more information about the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "private",
            "description": "Either true to make the repository private, or false to make it public. Creating private repositories requires a paid GitHub account.  Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/deployments": {
      "post": {
        "parameters": [
          {
            "name": "auto_merge",
            "description": "Optional parameter to merge the default branch into the requested ref if it is behind the default branch. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "description",
            "description": "Optional short description. Default: \"\"",
            "in": "query",
            "type": "string"
          },
          {
            "name": "environment",
            "description": "The name of the environment that was deployed to. e.g. staging or production. Default: none",
            "in": "query",
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The Deployment ID to list the statuses from.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "payload",
            "description": "Optional JSON payload with extra information about the deployment. Default: \"\"",
            "in": "query",
            "type": "string"
          },
          {
            "name": "ref",
            "description": "The name of the ref. This can be a branch, tag, or sha. Default: none",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_contexts",
            "description": "Optional array of status contexts verified against commit status checks. If this parameter is omitted from the parameters then all unique contexts will be verified before a deployment is created. To bypass checking entirely pass an empty array. Defaults to all unique contexts.",
            "in": "query",
            "type": "Array"
          },
          {
            "name": "sha",
            "description": "The short or long sha that was recorded at creation time. Default: none",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Required. The state of the status. Can be one of pending, success, error, or failure.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "target_url",
            "description": "The target URL to associate with this status.  This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. Default: \"\"",
            "in": "query",
            "type": "string"
          },
          {
            "name": "task",
            "description": "The name of the task for the deployment. e.g. deploy or deploy:migrations. Default: none",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/deployments/{id}/statuses": {
      "get": {
        "parameters": [
          {
            "name": "auto_merge",
            "description": "Optional parameter to merge the default branch into the requested ref if it is behind the default branch. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "description",
            "description": "Optional short description. Default: \"\"",
            "in": "query",
            "type": "string"
          },
          {
            "name": "environment",
            "description": "Optional name for the target deployment environment (e.g., production, staging, qa). Default: \"production\"",
            "in": "query",
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The Deployment ID to list the statuses from.",
            "in": "path",
            "type": "integer"
          },
          {
            "name": "payload",
            "description": "Optional JSON payload with extra information about the deployment. Default: \"\"",
            "in": "query",
            "type": "string"
          },
          {
            "name": "ref",
            "description": "Required. The ref to deploy. This can be a branch, tag, or sha.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_contexts",
            "description": "Optional array of status contexts verified against commit status checks. If this parameter is omitted from the parameters then all unique contexts will be verified before a deployment is created. To bypass checking entirely pass an empty array. Defaults to all unique contexts.",
            "in": "query",
            "type": "Array"
          },
          {
            "name": "state",
            "description": "Required. The state of the status. Can be one of pending, success, error, or failure.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "target_url",
            "description": "The target URL to associate with this status.  This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. Default: \"\"",
            "in": "query",
            "type": "string"
          },
          {
            "name": "task",
            "description": "Optional parameter to specify a task to execute, e.g. deploy or deploy:migrations. Default: deploy",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "description",
            "description": "A short description of the status. Default: \"\"",
            "in": "query",
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The Deployment ID to list the statuses from.",
            "in": "path",
            "type": "integer"
          },
          {
            "name": "state",
            "description": "Required. The state of the status. Can be one of pending, success, error, or failure.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "target_url",
            "description": "The target URL to associate with this status.  This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. Default: \"\"",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/downloads/{id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "minLength": 1
                },
                "html_url": {
                  "type": "string",
                  "minLength": 1
                },
                "id": {
                  "type": "number"
                },
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "description": {
                  "type": "string",
                  "minLength": 1
                },
                "size": {
                  "type": "number"
                },
                "download_count": {
                  "type": "number"
                },
                "content_type": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": [
                "url",
                "html_url",
                "id",
                "name",
                "description",
                "size",
                "download_count",
                "content_type"
              ]
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/events": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {}
      }
    },
    "/repos/{owner}/{repo}/forks": {
      "post": {
        "parameters": [
          {
            "name": "organization",
            "description": "Optional parameter to specify the organization name if forking into an organization.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "The sort order. Can be either newest, oldest, or stargazers. Default: newest",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/blobs": {
      "post": {
        "parameters": [
          {
            "name": "content",
            "description": "Required. The new blob's content.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "encoding",
            "description": "The encoding used for content. Currently, \"utf-8\" and \"base64\" are supported. Default: \"utf-8\".",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/commits": {
      "post": {
        "parameters": [
          {
            "name": "date",
            "description": "Indicates when this commit was authored (or committed). This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "The email of the author (or committer) of the commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "message",
            "description": "Required. The commit message",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the author (or committer) of the commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "parents",
            "description": "Required. The SHAs of the commits that were the parents of this commit.  If omitted or empty, the commit will be written as a root commit.  For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
            "in": "query",
            "type": "\narray of strings"
          },
          {
            "name": "tree",
            "description": "Required. The SHA of the tree object this commit points to",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/refs": {
      "get": {
        "parameters": [
          {
            "name": "force",
            "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to false will make sure you're not overwriting work. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "ref",
            "description": "Required. The name of the fully qualified reference (ie: refs/heads/master). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
            "in": "query",
            "type": "type"
          },
          {
            "name": "sha",
            "description": "Required. The SHA1 value to set this reference to",
            "in": "query",
            "type": "type"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "force",
            "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to false will make sure you're not overwriting work. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "ref",
            "description": "Required. The name of the fully qualified reference (ie: refs/heads/master). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
            "in": "query",
            "type": "type"
          },
          {
            "name": "sha",
            "description": "Required. The SHA1 value to set this reference to",
            "in": "query",
            "type": "type"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/refs/heads/skunkworkz/featureA": {
      "get": {
        "parameters": [
          {
            "name": "force",
            "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to false will make sure you're not overwriting work. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "ref",
            "description": "Required. The name of the fully qualified reference (ie: refs/heads/master). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
            "in": "query",
            "type": "type"
          },
          {
            "name": "sha",
            "description": "Required. The SHA1 value to set this reference to",
            "in": "query",
            "type": "type"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/refs/tags": {
      "get": {
        "parameters": [
          {
            "name": "force",
            "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to false will make sure you're not overwriting work. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "ref",
            "description": "Required. The name of the fully qualified reference (ie: refs/heads/master). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
            "in": "query",
            "type": "type"
          },
          {
            "name": "sha",
            "description": "Required. The SHA1 value to set this reference to",
            "in": "query",
            "type": "type"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/refs/{ref}": {
      "delete": {
        "parameters": [
          {
            "name": "force",
            "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to false will make sure you're not overwriting work. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "sha",
            "description": "Required. The SHA1 value to set this reference to",
            "in": "query",
            "type": "type"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "ref",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "force",
            "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to false will make sure you're not overwriting work. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "ref",
            "description": "Required. The name of the fully qualified reference (ie: refs/heads/master). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
            "in": "path",
            "type": "type"
          },
          {
            "name": "sha",
            "description": "Required. The SHA1 value to set this reference to",
            "in": "query",
            "type": "type"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/tags": {
      "post": {
        "parameters": [
          {
            "name": "date",
            "description": "When this object was tagged. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "The email of the author of the tag",
            "in": "query",
            "type": "string"
          },
          {
            "name": "message",
            "description": "The tag message",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the author of the tag",
            "in": "query",
            "type": "string"
          },
          {
            "name": "object",
            "description": "The SHA of the git object this is tagging",
            "in": "query",
            "type": "string"
          },
          {
            "name": "tag",
            "description": "The tag",
            "in": "query",
            "type": "string"
          },
          {
            "name": "tagger",
            "description": "An object with information about the individual creating the tag.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "type",
            "description": "The type of the object we're tagging. Normally this is a commit but it can also be a tree or a blob.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/trees": {
      "post": {
        "parameters": [
          {
            "name": "base_tree",
            "description": "The SHA1 of the tree you want to update with new data. If you don't set this, the commit will be created on top of everything; however, it will only contain your change, the rest of your files will show up as deleted.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "content",
            "description": "The content you want this file to have. GitHub will write this blob out and use that SHA for this entry.  Use either this, or tree.sha.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "mode",
            "description": "The file mode; one of 100644 for file (blob), 100755 for executable (blob), 040000 for subdirectory (tree), 160000 for submodule (commit), or 120000 for a blob that specifies the path of a symlink",
            "in": "query",
            "type": "string"
          },
          {
            "name": "path",
            "description": "The file referenced in the tree",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The SHA1 checksum ID of the object in the tree",
            "in": "query",
            "type": "string"
          },
          {
            "name": "tree",
            "description": "Required. Objects (of path, mode, type, and sha) specifying a tree structure",
            "in": "query",
            "type": "\narray of objects"
          },
          {
            "name": "type",
            "description": "Either blob, tree, or commit",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/git/trees/{sha}": {
      "get": {
        "parameters": [
          {
            "name": "base_tree",
            "description": "The SHA1 of the tree you want to update with new data. If you don't set this, the commit will be created on top of everything; however, it will only contain your change, the rest of your files will show up as deleted.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "content",
            "description": "The content you want this file to have. GitHub will write this blob out and use that SHA for this entry.  Use either this, or tree.sha.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "mode",
            "description": "The file mode; one of 100644 for file (blob), 100755 for executable (blob), 040000 for subdirectory (tree), 160000 for submodule (commit), or 120000 for a blob that specifies the path of a symlink",
            "in": "query",
            "type": "string"
          },
          {
            "name": "path",
            "description": "The file referenced in the tree",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sha",
            "description": "The SHA1 checksum ID of the object in the tree",
            "in": "path",
            "type": "string"
          },
          {
            "name": "tree",
            "description": "Required. Objects (of path, mode, type, and sha) specifying a tree structure",
            "in": "query",
            "type": "\narray of objects"
          },
          {
            "name": "type",
            "description": "Either blob, tree, or commit",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/hooks": {
      "post": {
        "parameters": [
          {
            "name": "X-GitHub-Delivery",
            "in": "query",
            "type": "A guid to identify the payload and event being sent."
          },
          {
            "name": "X-GitHub-Event",
            "in": "query",
            "type": "The event type that was triggered."
          },
          {
            "name": "X-Hub-Signature",
            "in": "query",
            "type": "The value of this header is computed as the HMAC hex digest of the body, using the secret config option as the key."
          },
          {
            "name": "active",
            "description": "Determines whether the hook is actually triggered on pushes.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "add_events",
            "description": "Determines a list of events to be added to the list of events that the Hook triggers for.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "config",
            "description": "Required. Key/value pairs to provide settings for this hook.  These settings vary between the services and are defined in the github-services repository. Booleans are stored internally as \"1\" for true, and \"0\" for false.  Any JSON true/false values will be converted automatically.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "events",
            "description": "Determines what events the hook is triggered for.  Default: [\"push\"]",
            "in": "query",
            "type": "array"
          },
          {
            "name": "hub.callback",
            "description": "The URI to receive the updates to the topic.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.mode",
            "description": "Required. Either subscribe or unsubscribe.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.secret",
            "description": "A shared secret key that generates a SHA1 HMAC of the outgoing body content.  You can verify a push came from GitHub by comparing the raw request body with the contents of the X-Hub-Signature header.  You can see our Ruby implementation, or the PubSubHubbub documentation for more details.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.topic",
            "description": "Required.  The URI of the GitHub repository to subscribe to.  The path must be in the format of /:owner/:repo/events/:event.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. Use web for a webhook or use the name of a valid service. (See /hooks for the list of valid service names.)",
            "in": "query",
            "type": "string"
          },
          {
            "name": "remove_events",
            "description": "Determines a list of events to be removed from the list of events that the Hook triggers for.",
            "in": "query",
            "type": "array"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/hooks/{id}": {
      "delete": {
        "parameters": [
          {
            "name": "X-GitHub-Delivery",
            "in": "query",
            "type": "A guid to identify the payload and event being sent."
          },
          {
            "name": "X-GitHub-Event",
            "in": "query",
            "type": "The event type that was triggered."
          },
          {
            "name": "X-Hub-Signature",
            "in": "query",
            "type": "The value of this header is computed as the HMAC hex digest of the body, using the secret config option as the key."
          },
          {
            "name": "hub.callback",
            "description": "The URI to receive the updates to the topic.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.mode",
            "description": "Required. Either subscribe or unsubscribe.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.secret",
            "description": "A shared secret key that generates a SHA1 HMAC of the outgoing body content.  You can verify a push came from GitHub by comparing the raw request body with the contents of the X-Hub-Signature header.  You can see our Ruby implementation, or the PubSubHubbub documentation for more details.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.topic",
            "description": "Required.  The URI of the GitHub repository to subscribe to.  The path must be in the format of /:owner/:repo/events/:event.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "X-GitHub-Delivery",
            "in": "query",
            "type": "A guid to identify the payload and event being sent."
          },
          {
            "name": "X-GitHub-Event",
            "in": "query",
            "type": "The event type that was triggered."
          },
          {
            "name": "X-Hub-Signature",
            "in": "query",
            "type": "The value of this header is computed as the HMAC hex digest of the body, using the secret config option as the key."
          },
          {
            "name": "active",
            "description": "Determines whether the hook is actually triggered on pushes.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "add_events",
            "description": "Determines a list of events to be added to the list of events that the Hook triggers for.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "config",
            "description": "Required. Key/value pairs to provide settings for this hook.  These settings vary between the services and are defined in the github-services repository. Booleans are stored internally as \"1\" for true, and \"0\" for false.  Any JSON true/false values will be converted automatically.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "events",
            "description": "Determines what events the hook is triggered for.  Default: [\"push\"]",
            "in": "query",
            "type": "array"
          },
          {
            "name": "hub.callback",
            "description": "The URI to receive the updates to the topic.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.mode",
            "description": "Required. Either subscribe or unsubscribe.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.secret",
            "description": "A shared secret key that generates a SHA1 HMAC of the outgoing body content.  You can verify a push came from GitHub by comparing the raw request body with the contents of the X-Hub-Signature header.  You can see our Ruby implementation, or the PubSubHubbub documentation for more details.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.topic",
            "description": "Required.  The URI of the GitHub repository to subscribe to.  The path must be in the format of /:owner/:repo/events/:event.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. Use web for a webhook or use the name of a valid service. (See /hooks for the list of valid service names.)",
            "in": "query",
            "type": "string"
          },
          {
            "name": "remove_events",
            "description": "Determines a list of events to be removed from the list of events that the Hook triggers for.",
            "in": "query",
            "type": "array"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "X-GitHub-Delivery",
            "in": "query",
            "type": "A guid to identify the payload and event being sent."
          },
          {
            "name": "X-GitHub-Event",
            "in": "query",
            "type": "The event type that was triggered."
          },
          {
            "name": "X-Hub-Signature",
            "in": "query",
            "type": "The value of this header is computed as the HMAC hex digest of the body, using the secret config option as the key."
          },
          {
            "name": "active",
            "description": "Determines whether the hook is actually triggered on pushes.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "add_events",
            "description": "Determines a list of events to be added to the list of events that the Hook triggers for.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "config",
            "description": "Required. Key/value pairs to provide settings for this hook.  These settings vary between the services and are defined in the github-services repository. Booleans are stored internally as \"1\" for true, and \"0\" for false.  Any JSON true/false values will be converted automatically.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "events",
            "description": "Determines what events the hook is triggered for.  Default: [\"push\"]",
            "in": "query",
            "type": "array"
          },
          {
            "name": "hub.callback",
            "description": "The URI to receive the updates to the topic.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.mode",
            "description": "Required. Either subscribe or unsubscribe.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.secret",
            "description": "A shared secret key that generates a SHA1 HMAC of the outgoing body content.  You can verify a push came from GitHub by comparing the raw request body with the contents of the X-Hub-Signature header.  You can see our Ruby implementation, or the PubSubHubbub documentation for more details.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.topic",
            "description": "Required.  The URI of the GitHub repository to subscribe to.  The path must be in the format of /:owner/:repo/events/:event.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. Use web for a webhook or use the name of a valid service. (See /hooks for the list of valid service names.)",
            "in": "query",
            "type": "string"
          },
          {
            "name": "remove_events",
            "description": "Determines a list of events to be removed from the list of events that the Hook triggers for.",
            "in": "query",
            "type": "array"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/hooks/{id}/pings": {
      "post": {
        "parameters": [
          {
            "name": "X-GitHub-Delivery",
            "in": "query",
            "type": "A guid to identify the payload and event being sent."
          },
          {
            "name": "X-GitHub-Event",
            "in": "query",
            "type": "The event type that was triggered."
          },
          {
            "name": "X-Hub-Signature",
            "in": "query",
            "type": "The value of this header is computed as the HMAC hex digest of the body, using the secret config option as the key."
          },
          {
            "name": "hub.callback",
            "description": "The URI to receive the updates to the topic.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.mode",
            "description": "Required. Either subscribe or unsubscribe.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.secret",
            "description": "A shared secret key that generates a SHA1 HMAC of the outgoing body content.  You can verify a push came from GitHub by comparing the raw request body with the contents of the X-Hub-Signature header.  You can see our Ruby implementation, or the PubSubHubbub documentation for more details.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.topic",
            "description": "Required.  The URI of the GitHub repository to subscribe to.  The path must be in the format of /:owner/:repo/events/:event.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/hooks/{id}/tests": {
      "post": {
        "parameters": [
          {
            "name": "X-GitHub-Delivery",
            "in": "query",
            "type": "A guid to identify the payload and event being sent."
          },
          {
            "name": "X-GitHub-Event",
            "in": "query",
            "type": "The event type that was triggered."
          },
          {
            "name": "X-Hub-Signature",
            "in": "query",
            "type": "The value of this header is computed as the HMAC hex digest of the body, using the secret config option as the key."
          },
          {
            "name": "active",
            "description": "Determines whether the hook is actually triggered on pushes.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "add_events",
            "description": "Determines a list of events to be added to the list of events that the Hook triggers for.",
            "in": "query",
            "type": "array"
          },
          {
            "name": "config",
            "description": "Key/value pairs to provide settings for this hook.  Modifying this will replace the entire config object.  These settings vary between the services and are defined in the github-services repository. Booleans are stored internally as \"1\" for true, and \"0\" for false.  Any JSON true/false values will be converted automatically.",
            "in": "query",
            "type": "object"
          },
          {
            "name": "events",
            "description": "Determines what events the hook is triggered for.  This replaces the entire array of events.  Default: [\"push\"]",
            "in": "query",
            "type": "array"
          },
          {
            "name": "hub.callback",
            "description": "The URI to receive the updates to the topic.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.mode",
            "description": "Required. Either subscribe or unsubscribe.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.secret",
            "description": "A shared secret key that generates a SHA1 HMAC of the outgoing body content.  You can verify a push came from GitHub by comparing the raw request body with the contents of the X-Hub-Signature header.  You can see our Ruby implementation, or the PubSubHubbub documentation for more details.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hub.topic",
            "description": "Required.  The URI of the GitHub repository to subscribe to.  The path must be in the format of /:owner/:repo/events/:event.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "remove_events",
            "description": "Determines a list of events to be removed from the list of events that the Hook triggers for.",
            "in": "query",
            "type": "array"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues": {
      "get": {
        "parameters": [
          {
            "name": "assignee",
            "description": "Can be the name of a user. Pass in none for issues with no assigned user, and * for issues assigned to any user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "The contents of the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "creator",
            "description": "The user that created the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Can be either asc or desc. Default: desc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Indicates which sorts of issues to return. Can be one of:* assigned: Issues assigned to you* created: Issues created by you* mentioned: Issues mentioning you* subscribed: Issues you're subscribed to updates for* all: All issues the authenticated user can see, regardless of participation or creation Default: assigned",
            "in": "query",
            "type": "string"
          },
          {
            "name": "labels",
            "description": "A list of comma separated label names.  Example: bug,ui,@high",
            "in": "query",
            "type": "string"
          },
          {
            "name": "mentioned",
            "description": "A user that's mentioned in the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "milestone",
            "description": "If an integer is passed, it should refer to a milestone by its number field. If the string * is passed, issues with any milestone are accepted. If the string none is passed, issues without milestones are returned.",
            "in": "query",
            "type": "\ninteger or string\n"
          },
          {
            "name": "since",
            "description": "Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "What to sort results by. Can be either created, updated, comments. Default: created",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return. Can be either open, closed, or all. Default: open",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "Required. The title of the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "assignee",
            "description": "Login for the user that this issue should be assigned to. NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "The contents of the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "labels",
            "description": "Labels to associate with this issue. NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise.",
            "in": "query",
            "type": "\narray of strings\n"
          },
          {
            "name": "milestone",
            "description": "The number of the milestone to associate this issue with. NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "state",
            "description": "State of the issue. Either open or closed.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "Required. The title of the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/comments": {
      "get": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The contents of the comment.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "direction",
            "description": "Either asc or desc. Ignored without the sort parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "since",
            "description": "Only comments updated at or after this time are returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Either created or updated. Default: created",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/comments/{id}": {
      "delete": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The contents of the comment.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The contents of the comment.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "direction",
            "description": "Either asc or desc. Ignored without the sort parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "since",
            "description": "Only comments updated at or after this time are returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Either created or updated. Default: created",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The contents of the comment.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/events": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/events/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{number}": {
      "get": {
        "parameters": [
          {
            "name": "assignee",
            "description": "Can be the name of a user. Pass in none for issues with no assigned user, and * for issues assigned to any user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "The contents of the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "creator",
            "description": "The user that created the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Can be either asc or desc. Default: desc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "labels",
            "description": "A list of comma separated label names.  Example: bug,ui,@high",
            "in": "query",
            "type": "string"
          },
          {
            "name": "mentioned",
            "description": "A user that's mentioned in the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "milestone",
            "description": "If an integer is passed, it should refer to a milestone by its number field. If the string * is passed, issues with any milestone are accepted. If the string none is passed, issues without milestones are returned.",
            "in": "query",
            "type": "\ninteger or string\n"
          },
          {
            "name": "since",
            "description": "Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "What to sort results by. Can be either created, updated, comments. Default: created",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return. Can be either open, closed, or all. Default: open",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "Required. The title of the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "assignee",
            "description": "Login for the user that this issue should be assigned to. NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "The contents of the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "labels",
            "description": "Labels to associate with this issue. NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise.",
            "in": "query",
            "type": "\narray of strings\n"
          },
          {
            "name": "milestone",
            "description": "The number of the milestone to associate this issue with. NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "state",
            "description": "State of the issue. Either open or closed.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "Required. The title of the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{number}/comments": {
      "post": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The contents of the comment.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{number}/labels": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/issues/{number}/labels/{name}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          },
          {
            "in": "path",
            "name": "name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/keys": {
      "post": {
        "parameters": [
          {
            "name": "key",
            "description": "The contents of the key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "read_only",
            "description": "If true, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "title",
            "description": "A name for the key.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/keys/{id}": {
      "delete": {
        "parameters": [
          {
            "name": "key",
            "description": "The contents of the key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "read_only",
            "description": "If true, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "title",
            "description": "A name for the key.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "key",
            "description": "The contents of the key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "read_only",
            "description": "If true, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "title",
            "description": "A name for the key.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/labels": {
      "post": {
        "parameters": [
          {
            "name": "color",
            "description": "Required.  A 6 character hex code, without the leading #, identifying the color.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the label.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/labels/{name}": {
      "delete": {
        "parameters": [
          {
            "name": "color",
            "description": "Required.  A 6 character hex code, without the leading #, identifying the color.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the label.",
            "in": "path",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "color",
            "description": "Required.  A 6 character hex code, without the leading #, identifying the color.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the label.",
            "in": "path",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "color",
            "description": "Required.  A 6 character hex code, without the leading #, identifying the color.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the label.",
            "in": "path",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/languages": {
      "get": {
        "parameters": [
          {
            "name": "anon",
            "description": "Set to 1 or true to include anonymous contributors in results.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/license": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/milestones": {
      "post": {
        "parameters": [
          {
            "name": "description",
            "description": "A description of the milestone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "due_on",
            "description": "The milestone due date. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state of the milestone. Either open or closed. Default: open",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "Required. The title of the milestone.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/milestones/{number}": {
      "delete": {
        "parameters": [
          {
            "name": "description",
            "description": "A description of the milestone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "due_on",
            "description": "The milestone due date. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state of the milestone. Either open or closed. Default: open",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "The title of the milestone.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "description",
            "description": "A description of the milestone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Either asc or desc. Default: asc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "due_on",
            "description": "The milestone due date. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "What to sort results by. Either due_date or completeness. Default: due_date",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state of the milestone. Either open, closed, or all. Default: open",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "Required. The title of the milestone.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "description",
            "description": "A description of the milestone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "due_on",
            "description": "The milestone due date. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "The state of the milestone. Either open or closed. Default: open",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "Required. The title of the milestone.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/milestones/{number}/labels": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "url",
                  "name",
                  "color"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "color": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          }
        }
      }
    },
    "/repos/{owner}/{repo}/notifications": {
      "get": {
        "parameters": [
          {
            "name": "all",
            "description": "If true, show notifications marked as read. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "before",
            "description": "Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "last_read_at",
            "description": "Describes the last point that notifications were checked.  Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: Time.now",
            "in": "query",
            "type": "string"
          },
          {
            "name": "participating",
            "description": "If true, only shows notifications in which the user is directly participating or mentioned. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "since",
            "description": "Only show notifications updated after the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: Time.now",
            "in": "query",
            "type": "string"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "last_read_at",
            "description": "Describes the last point that notifications were checked.  Anything updated since this time will not be updated. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: Time.now",
            "in": "query",
            "type": "string"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this thread",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "205": {
            "description": "Reset Content"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pages/builds": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pages/builds/latest": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls": {
      "post": {
        "parameters": [
          {
            "name": "base",
            "description": "Required. The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "The contents of the pull request.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "commit_message",
            "description": "The message that will be used for the merge commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "head",
            "description": "Required. The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "issue",
            "description": "Required. The issue number in this repository to turn into a Pull Request.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "sha",
            "description": "SHA that pull request head must match to allow merge",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "State of this Pull Request. Either open or closed.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "Required. The title of the pull request.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/comments": {
      "get": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The text of the comment",
            "in": "query",
            "type": "string"
          },
          {
            "name": "commit_id",
            "description": "Required. The SHA of the commit to comment on.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "direction",
            "description": "Can be either asc or desc. Ignored without sort parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "in_reply_to",
            "description": "Required. The comment id to reply to.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "path",
            "description": "Required. The relative path of the file to comment on.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "position",
            "description": "Required. The line index in the diff to comment on.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "since",
            "description": "Only comments updated at or after this time are returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Can be either created or updated. Default: created",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/comments/{id}": {
      "delete": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The text of the comment",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The text of the comment",
            "in": "query",
            "type": "string"
          },
          {
            "name": "commit_id",
            "description": "Required. The SHA of the commit to comment on.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "direction",
            "description": "Can be either asc or desc. Ignored without sort parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "in_reply_to",
            "description": "Required. The comment id to reply to.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "path",
            "description": "Required. The relative path of the file to comment on.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "position",
            "description": "Required. The line index in the diff to comment on.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "since",
            "description": "Only comments updated at or after this time are returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Can be either created or updated. Default: created",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The text of the comment",
            "in": "query",
            "type": "string"
          },
          {
            "name": "commit_id",
            "description": "Required. The SHA of the commit to comment on.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "in_reply_to",
            "description": "Required. The comment id to reply to.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "path",
            "description": "Required. The relative path of the file to comment on.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "position",
            "description": "Required. The line index in the diff to comment on.",
            "in": "query",
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{number}": {
      "get": {
        "parameters": [
          {
            "name": "base",
            "description": "Filter pulls by base branch name. Example: gh-pages.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "The contents of the pull request.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "commit_message",
            "description": "The message that will be used for the merge commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Can be either asc or desc. Default: desc when sort is created or sort is not specified, otherwise asc.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "head",
            "description": "Filter pulls by head user and branch name in the format of user:ref-name. Example: github:new-script-format.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "issue",
            "description": "Required. The issue number in this repository to turn into a Pull Request.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "sha",
            "description": "SHA that pull request head must match to allow merge",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "What to sort results by. Can be either created, updated, popularity (comment count) or long-running (age, filtering by pulls updated in the last month). Default: created",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Either open, closed, or all to filter by state. Default: open",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "Required. The title of the pull request.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "base",
            "description": "Required. The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "The contents of the pull request.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "commit_message",
            "description": "The message that will be used for the merge commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "head",
            "description": "Required. The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "issue",
            "description": "Required. The issue number in this repository to turn into a Pull Request.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "sha",
            "description": "SHA that pull request head must match to allow merge",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "State of this Pull Request. Either open or closed.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "Required. The title of the pull request.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{number}/comments": {
      "post": {
        "parameters": [
          {
            "name": "body",
            "description": "Required. The text of the comment",
            "in": "query",
            "type": "string"
          },
          {
            "name": "commit_id",
            "description": "Required. The SHA of the commit to comment on.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "in_reply_to",
            "description": "Required. The comment id to reply to.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "path",
            "description": "Required. The relative path of the file to comment on.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "position",
            "description": "Required. The line index in the diff to comment on.",
            "in": "query",
            "type": "integer"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{number}/commits": {
      "get": {
        "parameters": [
          {
            "name": "body",
            "description": "The contents of the pull request.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "commit_message",
            "description": "The message that will be used for the merge commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sha",
            "description": "SHA that pull request head must match to allow merge",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "State of this Pull Request. Either open or closed.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "The title of the pull request.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{number}/files": {
      "get": {
        "parameters": [
          {
            "name": "commit_message",
            "description": "The message that will be used for the merge commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sha",
            "description": "SHA that pull request head must match to allow merge",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/pulls/{number}/merge": {
      "get": {
        "parameters": [
          {
            "name": "commit_message",
            "description": "The message that will be used for the merge commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sha",
            "description": "SHA that pull request head must match to allow merge",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "commit_message",
            "description": "The message that will be used for the merge commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sha",
            "description": "SHA that pull request head must match to allow merge",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "number",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases": {
      "post": {
        "parameters": [
          {
            "name": "Content-Type",
            "description": "Required. The content type of the asset. This should be set in the Header. Example: \"application/zip\". For a list of acceptable types, refer this list of common media types.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "Text describing the contents of the tag.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "draft",
            "description": "true to create a draft (unpublished) release, false to create a published one. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "label",
            "description": "An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the release.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "prerelease",
            "description": "true to identify the release as a prerelease. false to identify the release as a full release. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "tag_name",
            "description": "Required. The name of the tag.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "target_commitish",
            "description": "Specifies the commitish value that determines where the Git tag is created from.  Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master).",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases/assets/{id}": {
      "delete": {
        "parameters": [
          {
            "name": "label",
            "description": "An alternate short description of the asset. Used in place of the filename.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The file name of the asset.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "Content-Type",
            "description": "Required. The content type of the asset. This should be set in the Header. Example: \"application/zip\". For a list of acceptable types, refer this list of common media types.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "label",
            "description": "An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The file name of the asset. This should be set in a URI query parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "label",
            "description": "An alternate short description of the asset. Used in place of the filename.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The file name of the asset.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "Content-Type",
            "description": "Required. The content type of the asset. This should be set in the Header. Example: \"application/zip\". For a list of acceptable types, refer this list of common media types.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "label",
            "description": "An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The file name of the asset. This should be set in a URI query parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases/latest": {
      "get": {
        "parameters": [
          {
            "name": "Content-Type",
            "description": "Required. The content type of the asset. This should be set in the Header. Example: \"application/zip\". For a list of acceptable types, refer this list of common media types.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "Text describing the contents of the tag.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "draft",
            "description": "true to create a draft (unpublished) release, false to create a published one. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "label",
            "description": "An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the release.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "prerelease",
            "description": "true to identify the release as a prerelease. false to identify the release as a full release. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "tag_name",
            "description": "Required. The name of the tag.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "target_commitish",
            "description": "Specifies the commitish value that determines where the Git tag is created from.  Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master).",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases/tags/{tag}": {
      "get": {
        "parameters": [
          {
            "name": "Content-Type",
            "description": "Required. The content type of the asset. This should be set in the Header. Example: \"application/zip\". For a list of acceptable types, refer this list of common media types.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "Text describing the contents of the tag.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "draft",
            "description": "true to create a draft (unpublished) release, false to create a published one. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "label",
            "description": "An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the release.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "prerelease",
            "description": "true to identify the release as a prerelease. false to identify the release as a full release. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "tag_name",
            "description": "Required. The name of the tag.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "target_commitish",
            "description": "Specifies the commitish value that determines where the Git tag is created from.  Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master).",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "tag",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases/{id}": {
      "delete": {
        "parameters": [
          {
            "name": "Content-Type",
            "description": "Required. The content type of the asset. This should be set in the Header. Example: \"application/zip\". For a list of acceptable types, refer this list of common media types.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "Text describing the contents of the tag.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "draft",
            "description": "true makes the release a draft, and false publishes the release.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "label",
            "description": "An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the release.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "prerelease",
            "description": "true to identify the release as a prerelease, false to identify the release as a full release.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "tag_name",
            "description": "The name of the tag.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "target_commitish",
            "description": "Specifies the commitish value that determines where the Git tag is created from.  Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master).",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "Content-Type",
            "description": "Required. The content type of the asset. This should be set in the Header. Example: \"application/zip\". For a list of acceptable types, refer this list of common media types.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "Text describing the contents of the tag.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "draft",
            "description": "true to create a draft (unpublished) release, false to create a published one. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "label",
            "description": "An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the release.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "prerelease",
            "description": "true to identify the release as a prerelease. false to identify the release as a full release. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "tag_name",
            "description": "Required. The name of the tag.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "target_commitish",
            "description": "Specifies the commitish value that determines where the Git tag is created from.  Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master).",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "Content-Type",
            "description": "Required. The content type of the asset. This should be set in the Header. Example: \"application/zip\". For a list of acceptable types, refer this list of common media types.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "Text describing the contents of the tag.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "draft",
            "description": "true to create a draft (unpublished) release, false to create a published one. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "label",
            "description": "An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the release.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "prerelease",
            "description": "true to identify the release as a prerelease. false to identify the release as a full release. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "tag_name",
            "description": "Required. The name of the tag.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "target_commitish",
            "description": "Specifies the commitish value that determines where the Git tag is created from.  Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master).",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/releases/{id}/assets": {
      "get": {
        "parameters": [
          {
            "name": "Content-Type",
            "description": "Required. The content type of the asset. This should be set in the Header. Example: \"application/zip\". For a list of acceptable types, refer this list of common media types.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "label",
            "description": "An alternate short description of the asset. Used in place of the filename. This should be set in a URI query parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The file name of the asset. This should be set in a URI query parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/stats/code_frequency": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/stats/commit_activity": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/stats/participation": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/stats/punch_card": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/subscription": {
      "delete": {
        "parameters": [
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this repository.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this repository.",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "type": "object",
              "properties": {
                "subscribed": {
                  "type": "boolean"
                },
                "ignored": {
                  "type": "boolean"
                },
                "reason": {},
                "created_at": {
                  "type": "string",
                  "minLength": 1
                },
                "url": {
                  "type": "string",
                  "minLength": 1
                },
                "repository_url": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": [
                "subscribed",
                "ignored",
                "created_at",
                "url",
                "repository_url"
              ]
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this repository.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this repository.",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this repository.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this repository.",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/tags": {
      "get": {
        "parameters": [
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/teams": {
      "get": {
        "parameters": [
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repos/{owner}/{repo}/{archive_format}/{ref}": {
      "get": {
        "parameters": [
          {
            "name": "archive_format",
            "description": "Can be either tarball or zipball. Default: tarball",
            "in": "path",
            "type": "string"
          },
          {
            "name": "branch",
            "description": "The branch name. Default: the repository’s default branch (usually master)",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "The email of the author (or committer) of the commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "message",
            "description": "Required. The commit message.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the author (or committer) of the commit",
            "in": "query",
            "type": "string"
          },
          {
            "name": "path",
            "description": "Required. The content path.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "ref",
            "description": "A valid Git reference. Default: the repository’s default branch (usually master)",
            "in": "path",
            "type": "string"
          },
          {
            "name": "sha",
            "description": "Required. The blob SHA of the file being replaced.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/repositories": {
      "get": {
        "parameters": [
          {
            "name": "anon",
            "description": "Set to 1 or true to include anonymous contributors in results.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "auto_init",
            "description": "Pass true to create an initial commit with empty README. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "default_branch",
            "description": "Updates the default branch for this repository.",
            "in": "query",
            "type": "String"
          },
          {
            "name": "description",
            "description": "A short description of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "gitignore_template",
            "description": "Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, \"Haskell\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "has_downloads",
            "description": "Either true to enable downloads for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_issues",
            "description": "Either true to enable issues for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_wiki",
            "description": "Either true to enable the wiki for this repository, false to disable it. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "homepage",
            "description": "A URL with more information about the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "license_template",
            "description": "Desired LICENSE template to apply. Use the name of the template without the extension. For example, \"mit\" or \"mozilla\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "private",
            "description": "Either true to create a private repository, or false to create a public one. Creating private repositories requires a paid GitHub account.  Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "name": "since",
            "description": "The integer ID of the last Repository that you've seen.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "team_id",
            "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "type",
            "description": "Can be one of all, public, private, forks, sources, member. Default: all",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/search/code": {
      "get": {
        "parameters": [
          {
            "name": "fragment",
            "in": "query",
            "type": "A subset of the value of property. This is the text fragment that matches one or more of the search terms."
          },
          {
            "name": "matches",
            "in": "query",
            "type": "An array of one or more search terms that are present in fragment. The indices (i.e., \"offsets\") are relative to the fragment. (They are not relative to the full content of property.)"
          },
          {
            "name": "object_type",
            "in": "query",
            "type": "The name for the type of resource that exists at the given object_url."
          },
          {
            "name": "object_url",
            "in": "query",
            "type": "The URL for the resource that contains a string property matching one of the search terms."
          },
          {
            "name": "order",
            "description": "The sort order if sort parameter is provided. One of asc or desc. Default: desc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "property",
            "in": "query",
            "type": "The name of a property of the resource that exists at object_url. That property is a string that matches one of the search terms. (In the JSON returned from object_url, the full content for the fragment will be found in the property with this name.)"
          },
          {
            "name": "q",
            "description": "The search terms.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "The sort field. Can only be indexed, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: results are sorted by best match.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/search/issues": {
      "get": {
        "parameters": [
          {
            "name": "fragment",
            "in": "query",
            "type": "A subset of the value of property. This is the text fragment that matches one or more of the search terms."
          },
          {
            "name": "matches",
            "in": "query",
            "type": "An array of one or more search terms that are present in fragment. The indices (i.e., \"offsets\") are relative to the fragment. (They are not relative to the full content of property.)"
          },
          {
            "name": "object_type",
            "in": "query",
            "type": "The name for the type of resource that exists at the given object_url."
          },
          {
            "name": "object_url",
            "in": "query",
            "type": "The URL for the resource that contains a string property matching one of the search terms."
          },
          {
            "name": "order",
            "description": "The sort order if sort parameter is provided. One of asc or desc. Default: desc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "property",
            "in": "query",
            "type": "The name of a property of the resource that exists at object_url. That property is a string that matches one of the search terms. (In the JSON returned from object_url, the full content for the fragment will be found in the property with this name.)"
          },
          {
            "name": "q",
            "description": "The search terms.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "The sort field. Can be comments, created, or updated. Default: results are sorted by best match.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/search/users": {
      "get": {
        "parameters": [
          {
            "name": "fragment",
            "in": "query",
            "type": "A subset of the value of property. This is the text fragment that matches one or more of the search terms."
          },
          {
            "name": "matches",
            "in": "query",
            "type": "An array of one or more search terms that are present in fragment. The indices (i.e., \"offsets\") are relative to the fragment. (They are not relative to the full content of property.)"
          },
          {
            "name": "object_type",
            "in": "query",
            "type": "The name for the type of resource that exists at the given object_url."
          },
          {
            "name": "object_url",
            "in": "query",
            "type": "The URL for the resource that contains a string property matching one of the search terms."
          },
          {
            "name": "order",
            "description": "The sort order if sort parameter is provided. One of asc or desc. Default: desc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "property",
            "in": "query",
            "type": "The name of a property of the resource that exists at object_url. That property is a string that matches one of the search terms. (In the JSON returned from object_url, the full content for the fragment will be found in the property with this name.)"
          },
          {
            "name": "q",
            "description": "The search terms.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "The sort field. Can be followers, repositories, or joined.  Default: results are sorted by best match.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/setup/api/configcheck": {
      "get": {
        "parameters": [
          {
            "name": "CONFIGURING",
            "in": "query",
            "type": "The job is running"
          },
          {
            "name": "DONE",
            "in": "query",
            "type": "The job has finished correctly"
          },
          {
            "name": "FAILED",
            "in": "query",
            "type": "The job has finished unexpectedly"
          },
          {
            "name": "PENDING",
            "in": "query",
            "type": "The job has not started yet"
          },
          {
            "name": "authorized_key",
            "description": "Required. The path to the public SSH key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "maintenance",
            "description": "Required. A JSON string with the attributes enabled and when.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "settings",
            "description": "Required. A JSON string with the new settings.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/setup/api/configure": {
      "post": {
        "parameters": [
          {
            "name": "authorized_key",
            "description": "Required. The path to the public SSH key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "maintenance",
            "description": "Required. A JSON string with the attributes enabled and when.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "settings",
            "description": "Required. A JSON string with the new settings.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/setup/api/maintenance": {
      "get": {
        "parameters": [
          {
            "name": "authorized_key",
            "description": "Required. The path to the public SSH key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "maintenance",
            "description": "Required. A JSON string with the attributes enabled and when.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "authorized_key",
            "description": "Required. The path to the public SSH key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "maintenance",
            "description": "Required. A JSON string with the attributes enabled and when.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/setup/api/settings": {
      "get": {
        "parameters": [
          {
            "name": "authorized_key",
            "description": "Required. The path to the public SSH key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "maintenance",
            "description": "Required. A JSON string with the attributes enabled and when.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "settings",
            "description": "Required. A JSON string with the new settings.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "authorized_key",
            "description": "Required. The path to the public SSH key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "maintenance",
            "description": "Required. A JSON string with the attributes enabled and when.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "settings",
            "description": "Required. A JSON string with the new settings.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/setup/api/settings/authorized-keys": {
      "delete": {
        "parameters": [
          {
            "name": "authorized_key",
            "description": "Required. The path to the public SSH key.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "key",
                  "pretty-print"
                ],
                "properties": {
                  "key": {
                    "type": "string",
                    "minLength": 1
                  },
                  "pretty-print": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "authorized_key",
            "description": "Required. The path to the public SSH key.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "name": "authorized_key",
            "description": "Required. The path to the public SSH key.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/setup/api/start": {
      "post": {
        "parameters": [
          {
            "name": "CONFIGURING",
            "in": "query",
            "type": "The job is running"
          },
          {
            "name": "DONE",
            "in": "query",
            "type": "The job has finished correctly"
          },
          {
            "name": "FAILED",
            "in": "query",
            "type": "The job has finished unexpectedly"
          },
          {
            "name": "PENDING",
            "in": "query",
            "type": "The job has not started yet"
          },
          {
            "name": "authorized_key",
            "description": "Required. The path to the public SSH key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "license",
            "description": "Required. The content of your .ghl license file.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "maintenance",
            "description": "Required. A JSON string with the attributes enabled and when.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "password",
            "description": "You must provide a password only if you are uploading your license for the first time. If you previously set a password through the web interface, you don't need this parameter.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "settings",
            "description": "Optional path to a JSON file containing your installation settings.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/setup/api/upgrade": {
      "post": {
        "parameters": [
          {
            "name": "CONFIGURING",
            "in": "query",
            "type": "The job is running"
          },
          {
            "name": "DONE",
            "in": "query",
            "type": "The job has finished correctly"
          },
          {
            "name": "FAILED",
            "in": "query",
            "type": "The job has finished unexpectedly"
          },
          {
            "name": "PENDING",
            "in": "query",
            "type": "The job has not started yet"
          },
          {
            "name": "authorized_key",
            "description": "Required. The path to the public SSH key.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "license",
            "description": "The content of your new .ghl license file.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "maintenance",
            "description": "Required. A JSON string with the attributes enabled and when.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "settings",
            "description": "Required. A JSON string with the new settings.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/teams/{id}": {
      "delete": {
        "parameters": [
          {
            "name": "description",
            "description": "The description of the team.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the team.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "permission",
            "description": "Deprecated. In the preview period described in the alert below, a team's permission attribute no longer dictates what permission it has on its repositories; it only dictates what permission a new repository will be added to the team with if none is specified by the user. Avoid confusion by specifying a permission when using the Add team repository API instead.The permission to grant the team. Can be one of: * pull - team members can pull, but not push to or administer these repositories. * push - team members can pull and push, but not administer these repositories. * admin - team members can pull, push and administer these repositories. Default: pull",
            "in": "query",
            "type": "string"
          },
          {
            "name": "privacy",
            "description": "The level of privacy this team should have. Can be one of: * secret - only visible to organization owners and members of this team. * closed - visible to all members of this organization.Default: secretThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "role",
            "description": "Filters members returned by their role in the team. Can be one of: * member - normal members of the team. * maintainer - team maintainers. * all - all members of the team.Default: allThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "description",
            "description": "The description of the team.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the team.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "permission",
            "description": "Deprecated. In the preview period described in the alert below, a team's permission attribute no longer dictates what permission it has on its repositories; it only dictates what permission the repositories in this request will be added with, and what permission a new repository will be added to the team with if none is specified by the user. Avoid confusion by specifying a permission when using the Add team repository API instead.The permission to grant the team. Can be one of: * pull - team members can pull, but not push to or administer these repositories. * push - team members can pull and push, but not administer these repositories. * admin - team members can pull, push and administer these repositories.Default: pull",
            "in": "query",
            "type": "string"
          },
          {
            "name": "privacy",
            "description": "The level of privacy this team should have. Can be one of: * secret - only visible to organization owners and members of this team. * closed - visible to all members of this organization.Default: secretThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "repo_names",
            "description": "The repositories to add the team to.",
            "in": "query",
            "type": "\narray of strings\n"
          },
          {
            "name": "role",
            "description": "Filters members returned by their role in the team. Can be one of: * member - normal members of the team. * maintainer - team maintainers. * all - all members of the team.Default: allThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "description",
            "description": "The description of the team.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the team.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "permission",
            "description": "Deprecated. In the preview period described in the alert below, a team's permission attribute no longer dictates what permission it has on its repositories; it only dictates what permission the repositories in this request will be added with, and what permission a new repository will be added to the team with if none is specified by the user. Avoid confusion by specifying a permission when using the Add team repository API instead.The permission to grant the team. Can be one of: * pull - team members can pull, but not push to or administer these repositories. * push - team members can pull and push, but not administer these repositories. * admin - team members can pull, push and administer these repositories.Default: pull",
            "in": "query",
            "type": "string"
          },
          {
            "name": "privacy",
            "description": "The level of privacy this team should have. Can be one of: * secret - only visible to organization owners and members of this team. * closed - visible to all members of this organization.Default: secretThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "repo_names",
            "description": "The repositories to add the team to.",
            "in": "query",
            "type": "\narray of strings\n"
          },
          {
            "name": "role",
            "description": "Filters members returned by their role in the team. Can be one of: * member - normal members of the team. * maintainer - team maintainers. * all - all members of the team.Default: allThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/teams/{id}/members": {
      "get": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team on this repository. Can be one of: * pull - team members can pull, but not push to or administer this repository. * push - team members can pull and push, but not administer this repository. * admin - team members can pull, push and administer this repository.If no permission is specified, the team's permission attribute will be used to determine what permission to grant the team on this repository.This parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "role",
            "description": "Filters members returned by their role in the team. Can be one of: * member - normal members of the team. * maintainer - team maintainers. * all - all members of the team.Default: allThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/teams/{id}/members/{username}": {
      "delete": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team on this repository. Can be one of: * pull - team members can pull, but not push to or administer this repository. * push - team members can pull and push, but not administer this repository. * admin - team members can pull, push and administer this repository.If no permission is specified, the team's permission attribute will be used to determine what permission to grant the team on this repository.This parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "role",
            "description": "The role that this user should have in the team. Can be one of: * member - a normal member of the team. * maintainer - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.Default: memberThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team on this repository. Can be one of: * pull - team members can pull, but not push to or administer this repository. * push - team members can pull and push, but not administer this repository. * admin - team members can pull, push and administer this repository.If no permission is specified, the team's permission attribute will be used to determine what permission to grant the team on this repository.This parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "role",
            "description": "Filters members returned by their role in the team. Can be one of: * member - normal members of the team. * maintainer - team maintainers. * all - all members of the team.Default: allThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team on this repository. Can be one of: * pull - team members can pull, but not push to or administer this repository. * push - team members can pull and push, but not administer this repository. * admin - team members can pull, push and administer this repository.If no permission is specified, the team's permission attribute will be used to determine what permission to grant the team on this repository.This parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "role",
            "description": "The role that this user should have in the team. Can be one of: * member - a normal member of the team. * maintainer - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.Default: memberThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/teams/{id}/memberships/{username}": {
      "delete": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team on this repository. Can be one of: * pull - team members can pull, but not push to or administer this repository. * push - team members can pull and push, but not administer this repository. * admin - team members can pull, push and administer this repository.If no permission is specified, the team's permission attribute will be used to determine what permission to grant the team on this repository.This parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "role",
            "description": "The role that this user should have in the team. Can be one of: * member - a normal member of the team. * maintainer - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.Default: memberThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team on this repository. Can be one of: * pull - team members can pull, but not push to or administer this repository. * push - team members can pull and push, but not administer this repository. * admin - team members can pull, push and administer this repository.If no permission is specified, the team's permission attribute will be used to determine what permission to grant the team on this repository.This parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "role",
            "description": "The role that this user should have in the team. Can be one of: * member - a normal member of the team. * maintainer - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.Default: memberThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team on this repository. Can be one of: * pull - team members can pull, but not push to or administer this repository. * push - team members can pull and push, but not administer this repository. * admin - team members can pull, push and administer this repository.If no permission is specified, the team's permission attribute will be used to determine what permission to grant the team on this repository.This parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "role",
            "description": "The role that this user should have in the team. Can be one of: * member - a normal member of the team. * maintainer - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.Default: memberThis parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/teams/{id}/repos": {
      "get": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team on this repository. Can be one of: * pull - team members can pull, but not push to or administer this repository. * push - team members can pull and push, but not administer this repository. * admin - team members can pull, push and administer this repository.If no permission is specified, the team's permission attribute will be used to determine what permission to grant the team on this repository.This parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/teams/{id}/repos/{org}/{repo}": {
      "put": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team on this repository. Can be one of: * pull - team members can pull, but not push to or administer this repository. * push - team members can pull and push, but not administer this repository. * admin - team members can pull, push and administer this repository.If no permission is specified, the team's permission attribute will be used to determine what permission to grant the team on this repository.This parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/teams/{id}/repos/{owner}/{repo}": {
      "delete": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team on this repository. Can be one of: * pull - team members can pull, but not push to or administer this repository. * push - team members can pull and push, but not administer this repository. * admin - team members can pull, push and administer this repository.If no permission is specified, the team's permission attribute will be used to determine what permission to grant the team on this repository.This parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "permission",
            "description": "The permission to grant the team on this repository. Can be one of: * pull - team members can pull, but not push to or administer this repository. * push - team members can pull and push, but not administer this repository. * admin - team members can pull, push and administer this repository.If no permission is specified, the team's permission attribute will be used to determine what permission to grant the team on this repository.This parameter requires a custom media type to be specified. Please see more in the alert below.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user": {
      "get": {
        "parameters": [
          {
            "name": "bio",
            "description": "The new short biography of the user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "blog",
            "description": "The new blog URL of the user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "company",
            "description": "The new company of the user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "Publicly visible email address.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hireable",
            "description": "The new hiring availability of the user.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "location",
            "description": "The new location of the user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The new name of the user",
            "in": "query",
            "type": "string"
          },
          {
            "name": "since",
            "description": "The integer ID of the last User that you've seen.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "bio",
            "description": "The new short biography of the user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "blog",
            "description": "The new blog URL of the user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "company",
            "description": "The new company of the user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "Publicly visible email address.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hireable",
            "description": "The new hiring availability of the user.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "location",
            "description": "The new location of the user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The new name of the user",
            "in": "query",
            "type": "string"
          },
          {
            "name": "since",
            "description": "The integer ID of the last User that you've seen.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user/emails": {
      "delete": {
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user/followers": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user/following": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "login",
                  "id",
                  "avatar_url",
                  "gravatar_id",
                  "url",
                  "html_url",
                  "followers_url",
                  "following_url",
                  "gists_url",
                  "starred_url",
                  "subscriptions_url",
                  "organizations_url",
                  "repos_url",
                  "events_url",
                  "received_events_url",
                  "type",
                  "site_admin"
                ],
                "properties": {
                  "login": {
                    "type": "string",
                    "minLength": 1
                  },
                  "id": {
                    "type": "number"
                  },
                  "avatar_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "html_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "followers_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "following_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "gists_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "starred_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "subscriptions_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "organizations_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "repos_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "events_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "received_events_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "type": {
                    "type": "string",
                    "minLength": 1
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/following/{username}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "login",
                  "id",
                  "avatar_url",
                  "gravatar_id",
                  "url",
                  "html_url",
                  "followers_url",
                  "following_url",
                  "gists_url",
                  "starred_url",
                  "subscriptions_url",
                  "organizations_url",
                  "repos_url",
                  "events_url",
                  "received_events_url",
                  "type",
                  "site_admin"
                ],
                "properties": {
                  "login": {
                    "type": "string",
                    "minLength": 1
                  },
                  "id": {
                    "type": "number"
                  },
                  "avatar_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "html_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "followers_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "following_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "gists_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "starred_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "subscriptions_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "organizations_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "repos_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "events_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "received_events_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "type": {
                    "type": "string",
                    "minLength": 1
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/user/issues": {
      "get": {
        "parameters": [
          {
            "name": "assignee",
            "description": "Can be the name of a user. Pass in none for issues with no assigned user, and * for issues assigned to any user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "body",
            "description": "The contents of the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "creator",
            "description": "The user that created the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Can be either asc or desc. Default: desc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "filter",
            "description": "Indicates which sorts of issues to return. Can be one of:* assigned: Issues assigned to you* created: Issues created by you* mentioned: Issues mentioning you* subscribed: Issues you're subscribed to updates for* all: All issues the authenticated user can see, regardless of participation or creation Default: assigned",
            "in": "query",
            "type": "string"
          },
          {
            "name": "labels",
            "description": "A list of comma separated label names.  Example: bug,ui,@high",
            "in": "query",
            "type": "string"
          },
          {
            "name": "mentioned",
            "description": "A user that's mentioned in the issue.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "milestone",
            "description": "If an integer is passed, it should refer to a milestone by its number field. If the string * is passed, issues with any milestone are accepted. If the string none is passed, issues without milestones are returned.",
            "in": "query",
            "type": "\ninteger or string\n"
          },
          {
            "name": "since",
            "description": "Only issues updated at or after this time are returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "What to sort results by. Can be either created, updated, comments. Default: created",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return. Can be either open, closed, or all. Default: open",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "description": "Required. The title of the issue.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user/keys": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user/keys/{id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user/memberships/orgs": {
      "get": {
        "parameters": [
          {
            "name": "state",
            "description": "Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/user/memberships/orgs/{org}": {
      "get": {
        "parameters": [
          {
            "name": "state",
            "description": "Indicates the state of the memberships to return. Can be either active or pending. If not specified, both active and pending memberships are returned.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "name": "state",
            "description": "Required. The state that the membership should be in. Only \"active\" will be accepted.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user/repos": {
      "post": {
        "parameters": [
          {
            "name": "anon",
            "description": "Set to 1 or true to include anonymous contributors in results.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "auto_init",
            "description": "Pass true to create an initial commit with empty README. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "default_branch",
            "description": "Updates the default branch for this repository.",
            "in": "query",
            "type": "String"
          },
          {
            "name": "description",
            "description": "A short description of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "gitignore_template",
            "description": "Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, \"Haskell\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "has_downloads",
            "description": "Either true to enable downloads for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_issues",
            "description": "Either true to enable issues for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_wiki",
            "description": "Either true to enable the wiki for this repository, false to disable it. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "homepage",
            "description": "A URL with more information about the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "license_template",
            "description": "Desired LICENSE template to apply. Use the name of the template without the extension. For example, \"mit\" or \"mozilla\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "private",
            "description": "Either true to create a private repository, or false to create a public one. Creating private repositories requires a paid GitHub account.  Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "name": "since",
            "description": "The integer ID of the last Repository that you've seen.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "team_id",
            "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user/starred": {
      "get": {
        "parameters": [
          {
            "name": "direction",
            "description": "One of asc (ascending) or desc (descending). Default: desc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "One of created (when the repository was starred) or updated (when it was last pushed to). Default: created",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user/starred/{owner}/{repo}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "name": "direction",
            "description": "One of asc (ascending) or desc (descending). Default: desc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "One of created (when the repository was starred) or updated (when it was last pushed to). Default: created",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "starred_at",
                  "repo"
                ],
                "properties": {
                  "starred_at": {
                    "type": "string",
                    "minLength": 1
                  },
                  "repo": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      },
                      "owner": {
                        "type": "object",
                        "properties": {
                          "login": {
                            "type": "string",
                            "minLength": 1
                          },
                          "id": {
                            "type": "number"
                          },
                          "avatar_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "gravatar_id": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "html_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "followers_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "following_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "gists_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "starred_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "subscriptions_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "organizations_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "repos_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "events_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "received_events_url": {
                            "type": "string",
                            "minLength": 1
                          },
                          "type": {
                            "type": "string",
                            "minLength": 1
                          },
                          "site_admin": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "login",
                          "id",
                          "avatar_url",
                          "gravatar_id",
                          "url",
                          "html_url",
                          "followers_url",
                          "following_url",
                          "gists_url",
                          "starred_url",
                          "subscriptions_url",
                          "organizations_url",
                          "repos_url",
                          "events_url",
                          "received_events_url",
                          "type",
                          "site_admin"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "minLength": 1
                      },
                      "full_name": {
                        "type": "string",
                        "minLength": 1
                      },
                      "description": {
                        "type": "string",
                        "minLength": 1
                      },
                      "private": {
                        "type": "boolean"
                      },
                      "fork": {
                        "type": "boolean"
                      },
                      "url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "html_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "archive_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "assignees_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "blobs_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "branches_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "clone_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "collaborators_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "comments_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "commits_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "compare_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "contents_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "contributors_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "downloads_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "events_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "forks_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "git_commits_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "git_refs_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "git_tags_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "git_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "hooks_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "issue_comment_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "issue_events_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "issues_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "keys_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "labels_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "languages_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "merges_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "milestones_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "mirror_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "notifications_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "pulls_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "releases_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "ssh_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "stargazers_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "statuses_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "subscribers_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "subscription_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "svn_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "tags_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "teams_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "trees_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "homepage": {
                        "type": "string",
                        "minLength": 1
                      },
                      "language": {},
                      "forks_count": {
                        "type": "number"
                      },
                      "stargazers_count": {
                        "type": "number"
                      },
                      "watchers_count": {
                        "type": "number"
                      },
                      "size": {
                        "type": "number"
                      },
                      "default_branch": {
                        "type": "string",
                        "minLength": 1
                      },
                      "open_issues_count": {
                        "type": "number"
                      },
                      "has_issues": {
                        "type": "boolean"
                      },
                      "has_wiki": {
                        "type": "boolean"
                      },
                      "has_pages": {
                        "type": "boolean"
                      },
                      "has_downloads": {
                        "type": "boolean"
                      },
                      "pushed_at": {
                        "type": "string",
                        "minLength": 1
                      },
                      "created_at": {
                        "type": "string",
                        "minLength": 1
                      },
                      "updated_at": {
                        "type": "string",
                        "minLength": 1
                      },
                      "permissions": {
                        "type": "object",
                        "properties": {
                          "admin": {
                            "type": "boolean"
                          },
                          "push": {
                            "type": "boolean"
                          },
                          "pull": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "admin",
                          "push",
                          "pull"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "owner",
                      "name",
                      "full_name",
                      "description",
                      "private",
                      "fork",
                      "url",
                      "html_url",
                      "archive_url",
                      "assignees_url",
                      "blobs_url",
                      "branches_url",
                      "clone_url",
                      "collaborators_url",
                      "comments_url",
                      "commits_url",
                      "compare_url",
                      "contents_url",
                      "contributors_url",
                      "downloads_url",
                      "events_url",
                      "forks_url",
                      "git_commits_url",
                      "git_refs_url",
                      "git_tags_url",
                      "git_url",
                      "hooks_url",
                      "issue_comment_url",
                      "issue_events_url",
                      "issues_url",
                      "keys_url",
                      "labels_url",
                      "languages_url",
                      "merges_url",
                      "milestones_url",
                      "mirror_url",
                      "notifications_url",
                      "pulls_url",
                      "releases_url",
                      "ssh_url",
                      "stargazers_url",
                      "statuses_url",
                      "subscribers_url",
                      "subscription_url",
                      "svn_url",
                      "tags_url",
                      "teams_url",
                      "trees_url",
                      "homepage",
                      "forks_count",
                      "stargazers_count",
                      "watchers_count",
                      "size",
                      "default_branch",
                      "open_issues_count",
                      "has_issues",
                      "has_wiki",
                      "has_pages",
                      "has_downloads",
                      "pushed_at",
                      "created_at",
                      "updated_at",
                      "permissions"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/user/subscriptions": {
      "get": {
        "parameters": [
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this repository.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this repository.",
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/user/subscriptions/{owner}/{repo}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "type": "string"
          },
          {
            "in": "path",
            "name": "repo",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/user/teams": {
      "get": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "url",
                  "name",
                  "slug",
                  "description",
                  "privacy",
                  "permission",
                  "members_url",
                  "repositories_url",
                  "members_count",
                  "repos_count",
                  "organization"
                ],
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "slug": {
                    "type": "string",
                    "minLength": 1
                  },
                  "description": {
                    "type": "string",
                    "minLength": 1
                  },
                  "privacy": {
                    "type": "string",
                    "minLength": 1
                  },
                  "permission": {
                    "type": "string",
                    "minLength": 1
                  },
                  "members_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "repositories_url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "members_count": {
                    "type": "number"
                  },
                  "repos_count": {
                    "type": "number"
                  },
                  "organization": {
                    "type": "object",
                    "properties": {
                      "login": {
                        "type": "string",
                        "minLength": 1
                      },
                      "id": {
                        "type": "number"
                      },
                      "url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "avatar_url": {
                        "type": "string",
                        "minLength": 1
                      },
                      "description": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "required": [
                      "login",
                      "id",
                      "url",
                      "avatar_url",
                      "description"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "parameters": [
          {
            "name": "bio",
            "description": "The new short biography of the user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "blog",
            "description": "The new blog URL of the user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "company",
            "description": "The new company of the user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "Publicly visible email address.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "hireable",
            "description": "The new hiring availability of the user.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "location",
            "description": "The new location of the user.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The new name of the user",
            "in": "query",
            "type": "string"
          },
          {
            "name": "since",
            "description": "The integer ID of the last User that you've seen.",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{username}/events": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {}
      }
    },
    "/users/{username}/events/orgs/{org}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          },
          {
            "in": "path",
            "name": "org",
            "type": "string"
          }
        ],
        "responses": {}
      }
    },
    "/users/{username}/events/public": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {}
      }
    },
    "/users/{username}/following": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{username}/following/{target_user}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          },
          {
            "in": "path",
            "name": "target_user",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/users/{username}/orgs": {
      "get": {
        "parameters": [
          {
            "name": "billing_email",
            "description": "Billing email address. This address is not publicized.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "company",
            "description": "The company name.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "description": "The description of the company.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "description": "The publicly visible email address.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "location",
            "description": "The location.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "The shorthand name of the company.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "since",
            "description": "The integer ID of the last Organization that you've seen.",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{username}/received_events": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {}
      }
    },
    "/users/{username}/received_events/public": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {}
      }
    },
    "/users/{username}/repos": {
      "get": {
        "parameters": [
          {
            "name": "affiliation",
            "description": "Comma-separated list of values. Can include:* owner: Repositories that are owned by the authenticated user.* collaborator: Repositories that the user has been added to as a collaborator.* organization_member: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.Default: owner,collaborator,organization_member",
            "in": "query",
            "type": "string"
          },
          {
            "name": "anon",
            "description": "Set to 1 or true to include anonymous contributors in results.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "auto_init",
            "description": "Pass true to create an initial commit with empty README. Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "contexts",
            "description": "Required. The list of status checks to require in order to merge into this branch",
            "in": "query",
            "type": "array"
          },
          {
            "name": "default_branch",
            "description": "Updates the default branch for this repository.",
            "in": "query",
            "type": "String"
          },
          {
            "name": "description",
            "description": "A short description of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "direction",
            "description": "Can be one of asc or desc. Default: when using full_name: asc; otherwise desc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "Required. Should this branch be protected or not",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "enforcement_level",
            "description": "Required. Who required status checks apply to. Options are off, non_admins or everyone.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "everyone",
            "in": "query",
            "type": "Required status checks will be enforced for everyone (including admins)."
          },
          {
            "name": "gitignore_template",
            "description": "Desired language or platform .gitignore template to apply. Use the name of the template without the extension. For example, \"Haskell\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "has_downloads",
            "description": "Either true to enable downloads for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_issues",
            "description": "Either true to enable issues for this repository, false to disable them. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "has_wiki",
            "description": "Either true to enable the wiki for this repository, false to disable it. Default: true",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "homepage",
            "description": "A URL with more information about the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "license_template",
            "description": "Desired LICENSE template to apply. Use the name of the template without the extension. For example, \"mit\" or \"mozilla\".",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the repository",
            "in": "query",
            "type": "string"
          },
          {
            "name": "non_admins",
            "in": "query",
            "type": "Required status checks will be enforced for non-admins."
          },
          {
            "name": "off",
            "in": "query",
            "type": "Turn off required status checks for this branch."
          },
          {
            "name": "private",
            "description": "Either true to create a private repository, or false to create a public one. Creating private repositories requires a paid GitHub account.  Default: false",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "protected",
            "description": "Set to 1 or true to only return protected branches.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "required_status_checks",
            "description": "Configure required status checks here",
            "in": "query",
            "type": "object"
          },
          {
            "name": "since",
            "description": "The integer ID of the last Repository that you've seen.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Can be one of created, updated, pushed, full_name. Default: full_name",
            "in": "query",
            "type": "string"
          },
          {
            "name": "team_id",
            "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "type",
            "description": "Can be one of all, owner, public, private, member. Default: allWill cause a 422 error if used in the same request as visibility or affiliation.",
            "in": "query",
            "type": "string"
          },
          {
            "name": "visibility",
            "description": "Can be one of all, public, or private. Default: all",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{username}/site_admin": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "key",
                  "url",
                  "title",
                  "verified",
                  "created_at",
                  "read_only",
                  "user_id"
                ],
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "key": {
                    "type": "string",
                    "minLength": 1
                  },
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "title": {
                    "type": "string",
                    "minLength": 1
                  },
                  "verified": {
                    "type": "boolean"
                  },
                  "created_at": {
                    "type": "string",
                    "minLength": 1
                  },
                  "read_only": {
                    "type": "boolean"
                  },
                  "user_id": {
                    "type": "number"
                  },
                  "repository_id": {}
                }
              }
            }
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "key",
                  "url",
                  "title",
                  "verified",
                  "created_at",
                  "read_only",
                  "user_id"
                ],
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "key": {
                    "type": "string",
                    "minLength": 1
                  },
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "title": {
                    "type": "string",
                    "minLength": 1
                  },
                  "verified": {
                    "type": "boolean"
                  },
                  "created_at": {
                    "type": "string",
                    "minLength": 1
                  },
                  "read_only": {
                    "type": "boolean"
                  },
                  "user_id": {
                    "type": "number"
                  },
                  "repository_id": {}
                }
              }
            }
          }
        }
      }
    },
    "/users/{username}/starred": {
      "get": {
        "parameters": [
          {
            "name": "direction",
            "description": "One of asc (ascending) or desc (descending). Default: desc",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "One of created (when the repository was starred) or updated (when it was last pushed to). Default: created",
            "in": "query",
            "type": "string"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{username}/subscriptions": {
      "get": {
        "parameters": [
          {
            "name": "ignored",
            "description": "Determines if all notifications should be blocked from this repository.",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "subscribed",
            "description": "Determines if notifications should be received from this repository.",
            "in": "query",
            "type": "boolean"
          },
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{username}/suspended": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "key",
                  "url",
                  "title",
                  "verified",
                  "created_at",
                  "read_only",
                  "user_id"
                ],
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "key": {
                    "type": "string",
                    "minLength": 1
                  },
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "title": {
                    "type": "string",
                    "minLength": 1
                  },
                  "verified": {
                    "type": "boolean"
                  },
                  "created_at": {
                    "type": "string",
                    "minLength": 1
                  },
                  "read_only": {
                    "type": "boolean"
                  },
                  "user_id": {
                    "type": "number"
                  },
                  "repository_id": {}
                }
              }
            }
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "schema": {
              "type": "array",
              "$schema": "http://json-schema.org/draft-04/schema#",
              "description": "",
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "key",
                  "url",
                  "title",
                  "verified",
                  "created_at",
                  "read_only",
                  "user_id"
                ],
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "key": {
                    "type": "string",
                    "minLength": 1
                  },
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "title": {
                    "type": "string",
                    "minLength": 1
                  },
                  "verified": {
                    "type": "boolean"
                  },
                  "created_at": {
                    "type": "string",
                    "minLength": 1
                  },
                  "read_only": {
                    "type": "boolean"
                  },
                  "user_id": {
                    "type": "number"
                  },
                  "repository_id": {}
                }
              }
            }
          }
        }
      }
    }
  },
  "schemes": [
    "https"
  ],
  "swagger": "2.0"
}